{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx\",\n    _class3;\n\nimport * as React from \"react\"; // import {NameReference} from \"./NameReference\";\n\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { Markup } from \"./stats/Markup\";\nimport \"./JournalReader.css\";\nexport let JournalReaderMachine = (_class = (_temp = _class2 = class JournalReaderMachine {\n  constructor() {\n    _initializerDefineProperty(this, \"rawText\", _descriptor, this);\n  }\n\n  updateRawText(value) {\n    this.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n  }\n\n  static splitOnMarkupPieces(text) {\n    //eslint-disable-next-line no-useless-escape\n    const pieces = text.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\n    return pieces;\n  }\n\n  renderJournal() {\n    const pieces = JournalReaderMachine.splitOnMarkupPieces(this.rawText);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }\n    }, pieces.map(piece => {\n      if (piece === undefined) {\n        return \"\";\n      }\n\n      if (piece.match(Markup.MARKUP_REGEX)) {\n        return Markup.getHtmlForMarkup(piece);\n      } else if (piece.match(JournalReaderMachine.DATE_REGEX)) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 8\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }\n        }), piece);\n      } else {\n        return piece;\n      }\n    }));\n  } // private replaceMarkupWithDisplayName(rawText: string): string\n  // {\n  // \twhile (true)\n  // \t{\n  // \t\tlet markup: Markup | null = Markup.create(rawText);\n  // \t\tif (markup == null)\n  // \t\t{\n  // \t\t\tbreak;\n  // \t\t}\n  //\n  // \t\tconst displayName: string | null = markup.displayName;\n  // \t\tif (displayName == null)\n  // \t\t{\n  // \t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n  // \t\t\treturn \"TODO\"; //TODO\n  // \t\t}\n  // \t\trawText = rawText.replace(markup, displayName);\n  // \t}\n  // \treturn rawText;\n  // }\n\n\n}, _class2.DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"rawText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"updateRawText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateRawText\"), _class.prototype)), _class);\nexport let JournalReader = observer(_class3 = class JournalReader extends React.Component {\n  get machine() {\n    return this.props.machine;\n  } //<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.machine.updateRawText(e.currentTarget.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 4\n      }\n    }), this.machine.renderJournal());\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx"],"names":["React","observable","action","observer","Markup","JournalReaderMachine","updateRawText","value","rawText","splitOnMarkupPieces","text","pieces","split","renderJournal","map","piece","undefined","match","MARKUP_REGEX","getHtmlForMarkup","DATE_REGEX","JournalReader","Component","machine","props","render","e","currentTarget"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAAQC,UAAR,EAAoBC,MAApB,QAAiC,MAAjC;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,SAAQC,MAAR,QAAqB,gBAArB;AACA,OAAO,qBAAP;AAOA,WAAaC,oBAAb,gCAAO,MAAMA,oBAAN,CACP;AAAA;AAAA;AAAA;;AAMQC,EAAAA,aADP,CACqBC,KADrB,EAEA;AACC,SAAKC,OAAL,GAAeD,KAAf,CADD,CACuB;AACtB;;AAED,SAAcE,mBAAd,CAAkCC,IAAlC,EACA;AACC;AACA,UAAMC,MAAgB,GAAGD,IAAI,CAACE,KAAL,CAAW,0DAAX,CAAzB,CAFD,CAEkG;;AACjG,WAAOD,MAAP;AACA;;AAEME,EAAAA,aAAP,GACA;AACC,UAAMF,MAAgB,GAAGN,oBAAoB,CAACI,mBAArB,CAAyC,KAAKD,OAA9C,CAAzB;AAEA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAELG,MAAM,CAACG,GAAP,CAAYC,KAAD,IAAmB;AAC7B,UAAIA,KAAK,KAAKC,SAAd,EACA;AACC,eAAO,EAAP;AACA;;AACD,UAAID,KAAK,CAACE,KAAN,CAAYb,MAAM,CAACc,YAAnB,CAAJ,EACA;AACC,eAAOd,MAAM,CAACe,gBAAP,CAAwBJ,KAAxB,CAAP;AACA,OAHD,MAIK,IAAIA,KAAK,CAACE,KAAN,CAAYZ,oBAAoB,CAACe,UAAjC,CAAJ,EACL;AACC,4BAAO,uDACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADM,eACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADC,EAELL,KAFK,CAAP;AAIA,OANI,MAQL;AACC,eAAOA,KAAP;AACA;AACD,KApBD,CAFK,CAAP;AAyBA,GA/CF,CAiDC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AApED,CADA,UAEgBK,UAFhB,GAE6B,0BAF7B,iFAIEnB,UAJF;AAAA;AAAA;AAAA;AAAA;AAAA,WAIsC,EAJtC;AAAA;AAAA,kEAMEC,MANF;AAyEA,WAAamB,aAAb,GADClB,QACD,WADA,MACakB,aADb,SACmCrB,KAAK,CAACsB,SADzC,CAEA;AACC,MAAYC,OAAZ,GACA;AACC,WAAO,KAAKC,KAAL,CAAWD,OAAlB;AACA,GAJF,CAMA;;;AACCE,EAAAA,MAAM,GACN;AACC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGC,CAAD,IAAO,KAAKH,OAAL,CAAajB,aAAb,CAA2BoB,CAAC,CAACC,aAAF,CAAgBpB,KAA3C,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,eAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,eAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHM,EAKL,KAAKgB,OAAL,CAAaV,aAAb,EALK,CAAP;AAOA;;AAhBF,CADA","sourcesContent":["import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport {Markup} from \"./stats/Markup\";\nimport \"./JournalReader.css\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\tprivate static DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/;\n\n\t@observable public rawText: string = \"\";\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic static splitOnMarkupPieces(text: string): string[]\n\t{\n\t\t//eslint-disable-next-line no-useless-escape\n\t\tconst pieces: string[] = text.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\t\treturn pieces;\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\tconst pieces: string[] = JournalReaderMachine.splitOnMarkupPieces(this.rawText);\n\n\t\treturn <div>\n\t\t\t{\n\t\t\t\tpieces.map((piece: string) => {\n\t\t\t\t\tif (piece === undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif (piece.match(Markup.MARKUP_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn Markup.getHtmlForMarkup(piece);\n\t\t\t\t\t}\n\t\t\t\t\telse if (piece.match(JournalReaderMachine.DATE_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn <>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t{piece}\n\t\t\t\t\t\t</>;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn piece;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t</div>;\n\t}\n\n\t// private replaceMarkupWithDisplayName(rawText: string): string\n\t// {\n\t// \twhile (true)\n\t// \t{\n\t// \t\tlet markup: Markup | null = Markup.create(rawText);\n\t// \t\tif (markup == null)\n\t// \t\t{\n\t// \t\t\tbreak;\n\t// \t\t}\n\t//\n\t// \t\tconst displayName: string | null = markup.displayName;\n\t// \t\tif (displayName == null)\n\t// \t\t{\n\t// \t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t// \t\t\treturn \"TODO\"; //TODO\n\t// \t\t}\n\t// \t\trawText = rawText.replace(markup, displayName);\n\t// \t}\n\t// \treturn rawText;\n\t// }\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n//<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\trender()\n\t{\n\t\treturn <div>\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\n\t\t\t{this.machine.renderJournal()}\n\t\t</div>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}