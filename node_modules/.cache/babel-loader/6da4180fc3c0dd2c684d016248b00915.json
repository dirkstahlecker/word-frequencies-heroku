{"ast":null,"code":"// export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\nexport class WordInfo {\n  constructor(word, count) {\n    this._word = void 0;\n    this._count = void 0;\n    this._word = word;\n    this._count = count;\n  }\n\n  get word() {\n    return this._word;\n  }\n\n  set word(value) {\n    this._word = value;\n  }\n\n  get count() {\n    return this._count;\n  }\n\n}\nexport class NameInfo extends WordInfo {\n  set word(value) {\n    if (!Markup.isMarkup(value)) {\n      throw Exception(\"Must be valid markup to be a NameInfo\");\n    }\n\n    this._word = value;\n  }\n\n  get name() {}\n\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/NamesDB.ts"],"names":["WordInfo","constructor","word","count","_word","_count","value","NameInfo","Markup","isMarkup","Exception","name"],"mappings":"AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,QAAN,CACP;AAIEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,KAAf,EACX;AAAA,SAJUC,KAIV;AAAA,SAHUC,MAGV;AACE,SAAKD,KAAL,GAAaF,IAAb;AACA,SAAKG,MAAL,GAAcF,KAAd;AACD;;AAED,MAAWD,IAAX,GACA;AACE,WAAO,KAAKE,KAAZ;AACD;;AAED,MAAWF,IAAX,CAAgBI,KAAhB,EACA;AACE,SAAKF,KAAL,GAAaE,KAAb;AACD;;AAED,MAAWH,KAAX,GACA;AACE,WAAO,KAAKE,MAAZ;AACD;;AAvBH;AA0BA,OAAO,MAAME,QAAN,SAAuBP,QAAvB,CACP;AACE,MAAWE,IAAX,CAAgBI,KAAhB,EACA;AACE,QAAI,CAACE,MAAM,CAACC,QAAP,CAAgBH,KAAhB,CAAL,EACA;AACE,YAAMI,SAAS,CAAC,uCAAD,CAAf;AACD;;AACD,SAAKN,KAAL,GAAaE,KAAb;AACD;;AAED,MAAWK,IAAX,GACA,CAEC;;AAbH","sourcesContent":["\n// export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo\n{\n  protected _word: string;\n  protected _count: number;\n\n  constructor(word: string, count: number)\n  {\n    this._word = word;\n    this._count = count;\n  }\n\n  public get word(): string\n  {\n    return this._word;\n  }\n\n  public set word(value: string)\n  {\n    this._word = value;\n  }\n\n  public get count(): string\n  {\n    return this._count;\n  }\n}\n\nexport class NameInfo extends WordInfo\n{\n  public set word(value: string)\n  {\n    if (!Markup.isMarkup(value))\n    {\n      throw Exception(\"Must be valid markup to be a NameInfo\");\n    }\n    this._word = value;\n  }\n\n  public get name(): string\n  {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}