{"ast":null,"code":"var _class,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Stats.tsx\";\n\nimport * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { JournalReaderMachine } from \"../JournalReader\";\nimport { NameInfo } from \"./NamesDB\";\nimport { Markup } from \"./Markup\";\nexport class StatsMachine {\n  // private journal: string = \"\"; //not observable - changing the journal needs a new stats object\n  // private namesDB: NamesDB = new NamesDB();\n  constructor(journal) {\n    this.namesDict = new Map();\n  } // this.journal = journal; //TODO\n  // this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and \" +\n  //   \"[!!Phil|Phil_Seo!!].\\n\\n1-2-20: And [!!Colin|Colin_Poler!!].\";\n  // this.makeStats();\n  //remove null and empty pieces\n\n\n  cleansePieces(pieces) {\n    const ret = [];\n    pieces.forEach(piece => {\n      if (piece == null || pieces === undefined) {\n        return;\n      }\n\n      if (piece === \"\") {\n        return;\n      }\n\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  makeNamesDict(pieces) {\n    pieces.forEach(piece => {\n      if (Markup.isMarkup(piece)) {\n        const wordInfo = this.namesDict.get(piece);\n\n        if (wordInfo === undefined) {\n          this.namesDict.set(piece, new NameInfo(piece, 1));\n        } else {\n          wordInfo.count = wordInfo.count + 1;\n          this.namesDict.set(piece, wordInfo);\n        }\n      }\n    }); // this.namesDB\n  }\n\n  makeStats() {\n    const journal = document.getElementById(\"journalInputBox\");\n    let pieces = JournalReaderMachine.splitOnMarkupPieces(journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n\n}\nexport let Stats = observer(_class = class Stats extends React.Component {\n  get machine() {\n    return this.props.machine;\n  }\n\n  render() {\n    let nameInfo = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }\n    });\n    this.machine.namesDict.forEach(wordInfo => {\n      nameInfo = /*#__PURE__*/React.createElement(React.Fragment, null, nameInfo, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, \"Name: \", wordInfo.word), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, \"Count: \", wordInfo.count));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"journalInputBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.machine.doStats(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, \"Submit\"), nameInfo);\n  }\n\n}) || _class;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Stats.tsx"],"names":["React","observer","JournalReaderMachine","NameInfo","Markup","StatsMachine","constructor","journal","namesDict","Map","cleansePieces","pieces","ret","forEach","piece","undefined","push","makeNamesDict","isMarkup","wordInfo","get","set","count","makeStats","document","getElementById","splitOnMarkupPieces","Stats","Component","machine","props","render","nameInfo","word","doStats"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {observable, runInAction} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {JournalReaderMachine} from \"../JournalReader\";\nimport {WordInfo, NameInfo} from \"./NamesDB\";\nimport {Markup} from \"./Markup\";\n\nexport interface StatsProps\n{\n  machine: StatsMachine;\n}\n\nexport class StatsMachine\n{\n  // private journal: string = \"\"; //not observable - changing the journal needs a new stats object\n\n  // private namesDB: NamesDB = new NamesDB();\n  public namesDict: Map<string, WordInfo> = new Map();\n\n  constructor(journal: string)\n  {\n    // this.journal = journal; //TODO\n    // this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and \" +\n    //   \"[!!Phil|Phil_Seo!!].\\n\\n1-2-20: And [!!Colin|Colin_Poler!!].\";\n    // this.makeStats();\n  }\n\n  //remove null and empty pieces\n  private cleansePieces(pieces: string[]): string[]\n  {\n    const ret: string[] = []\n    pieces.forEach((piece: string) => {\n      if (piece == null || pieces === undefined)\n      {\n        return;\n      }\n      if (piece === \"\")\n      {\n        return;\n      }\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  private makeNamesDict(pieces: string[]): void\n  {\n    pieces.forEach((piece: string) => {\n      if (Markup.isMarkup(piece))\n      {\n        const wordInfo: WordInfo | undefined = this.namesDict.get(piece);\n        if (wordInfo === undefined)\n        {\n          this.namesDict.set(piece,  new NameInfo(piece, 1));\n        }\n        else\n        {\n          wordInfo.count = wordInfo.count + 1;\n          this.namesDict.set(piece, wordInfo);\n        }\n      }\n    });\n    // this.namesDB\n  }\n\n  private makeStats(): void\n  {\n    const journal = document.getElementById(\"journalInputBox\");\n\n    let pieces: string[] = JournalReaderMachine.splitOnMarkupPieces(journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n}\n\n@observer\nexport class Stats extends React.Component<StatsProps>\n{\n  private get machine(): StatsMachine\n  {\n    return this.props.machine as StatsMachine;\n  }\n\n  render()\n  {\n    let nameInfo: JSX.Element = <div/>;\n    this.machine.namesDict.forEach((wordInfo: WordInfo) => {\n      nameInfo = <>\n        {nameInfo}\n        <div>Name: {wordInfo.word}</div>\n        <div>Count: {wordInfo.count}</div>\n      </>\n    });\n\n    return <div>\n      <input type=\"text\" id=\"journalInputBox\"/>\n      <button onClick={this.machine.doStats()}>Submit</button>\n      {\n        nameInfo\n      }\n    </div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}