{"ast":null,"code":"var textParsers = require('./lib/textParsers');\n\nvar binaryParsers = require('./lib/binaryParsers');\n\nvar arrayParser = require('./lib/arrayParser');\n\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\nvar typeParsers = {\n  text: {},\n  binary: {}\n}; //the empty parse function\n\nfunction noParse(val) {\n  return String(val);\n}\n\n; //returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\n\nfunction getTypeParser(oid, format) {\n  format = format || 'text';\n\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n\n  return typeParsers[format][oid] || noParse;\n}\n\n;\n\nfunction setTypeParser(oid, format, parseFn) {\n  if (typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n\n  typeParsers[format][oid] = parseFn;\n}\n\n;\ntextParsers.init(function (oid, converter) {\n  typeParsers.text[oid] = converter;\n});\nbinaryParsers.init(function (oid, converter) {\n  typeParsers.binary[oid] = converter;\n});","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg-types/index.js"],"names":["textParsers","require","binaryParsers","arrayParser","builtinTypes","exports","getTypeParser","setTypeParser","builtins","typeParsers","text","binary","noParse","val","String","oid","format","parseFn","init","converter"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AAEAI,OAAO,CAACC,aAAR,GAAwBA,aAAxB;AACAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACF,WAAR,GAAsBA,WAAtB;AACAE,OAAO,CAACG,QAAR,GAAmBJ,YAAnB;AAEA,IAAIK,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,CAAlB,C,CAKA;;AACA,SAASC,OAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOC,MAAM,CAACD,GAAD,CAAb;AACD;;AAAA,C,CAED;AACA;AACA;AACA;;AACA,SAASP,aAAT,CAAwBS,GAAxB,EAA6BC,MAA7B,EAAqC;AACnCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,MAAnB;;AACA,MAAI,CAACP,WAAW,CAACO,MAAD,CAAhB,EAA0B;AACxB,WAAOJ,OAAP;AACD;;AACD,SAAOH,WAAW,CAACO,MAAD,CAAX,CAAoBD,GAApB,KAA4BH,OAAnC;AACD;;AAAA;;AAED,SAASL,aAAT,CAAwBQ,GAAxB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8C;AAC5C,MAAG,OAAOD,MAAP,IAAiB,UAApB,EAAgC;AAC9BC,IAAAA,OAAO,GAAGD,MAAV;AACAA,IAAAA,MAAM,GAAG,MAAT;AACD;;AACDP,EAAAA,WAAW,CAACO,MAAD,CAAX,CAAoBD,GAApB,IAA2BE,OAA3B;AACD;;AAAA;AAEDjB,WAAW,CAACkB,IAAZ,CAAiB,UAASH,GAAT,EAAcI,SAAd,EAAyB;AACxCV,EAAAA,WAAW,CAACC,IAAZ,CAAiBK,GAAjB,IAAwBI,SAAxB;AACD,CAFD;AAIAjB,aAAa,CAACgB,IAAd,CAAmB,UAASH,GAAT,EAAcI,SAAd,EAAyB;AAC1CV,EAAAA,WAAW,CAACE,MAAZ,CAAmBI,GAAnB,IAA0BI,SAA1B;AACD,CAFD","sourcesContent":["var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n"]},"metadata":{},"sourceType":"script"}