{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _descriptor2,\n    _descriptor3,\n    _descriptor4,\n    _temp,\n    _class3,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Stats.tsx\";\n\nimport * as React from \"react\";\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { JournalReaderMachine } from \"../JournalReader\";\nimport { NameInfo } from \"./NamesDB\";\nimport { Markup } from \"./Markup\";\nimport { NameCounts } from \"./NameCounts\";\nexport let StatsMachine = (_class = (_temp = class StatsMachine {\n  // private namesDB: NamesDB = new NamesDB();\n  constructor(journal) {// this.journal = journal; //TODO\n    // this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and \" +\n    //   \"[!!Phil|Phil_Seo!!].\\n\\n1-2-20: And [!!Colin|Colin_Poler!!].\";\n    // this.makeStats();\n\n    _initializerDefineProperty(this, \"journal\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"namesDict\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"dataFreshness\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"onJournalInputChange\", _descriptor4, this);\n  }\n\n  //remove null and empty pieces\n  cleansePieces(pieces) {\n    const ret = [];\n    pieces.forEach(piece => {\n      if (piece == null || pieces === undefined) {\n        return;\n      }\n\n      if (piece === \"\") {\n        return;\n      }\n\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  makeNamesDict(pieces) {\n    pieces.forEach(piece => {\n      if (Markup.isMarkup(piece)) {\n        const wordInfo = this.namesDict.get(piece);\n\n        if (wordInfo === undefined) {\n          this.namesDict.set(piece, new NameInfo(piece, 1));\n        } else {\n          wordInfo.count = wordInfo.count + 1;\n          this.namesDict.set(piece, wordInfo);\n        }\n      }\n    }); // this.namesDB\n\n    this.dataFreshness++;\n  }\n\n  makeStats() {\n    // const journal = document.getElementById(\"journalInputBox\").value();\n    let pieces = JournalReaderMachine.splitOnMarkupPieces(this.journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"journal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"namesDict\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"dataFreshness\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"onJournalInputChange\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      this.journal = e.currentTarget.value;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"makeNamesDict\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"makeNamesDict\"), _class.prototype)), _class);\nexport let Stats = observer(_class3 = class Stats extends React.Component {\n  get machine() {\n    return this.props.machine;\n  }\n\n  render() {\n    const x = this.machine.dataFreshness; //ignore\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"journalInputBox\",\n      onChange: this.machine.onJournalInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.machine.makeStats(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(NameCounts, {\n      namesDict: this.machine.namesDict,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Stats.tsx"],"names":["React","observable","action","observer","JournalReaderMachine","NameInfo","Markup","NameCounts","StatsMachine","constructor","journal","cleansePieces","pieces","ret","forEach","piece","undefined","push","makeNamesDict","isMarkup","wordInfo","namesDict","get","set","count","dataFreshness","makeStats","splitOnMarkupPieces","Map","e","currentTarget","value","Stats","Component","machine","props","render","x","onJournalInputChange"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {observable, runInAction, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {JournalReaderMachine} from \"../JournalReader\";\nimport {WordInfo, NameInfo} from \"./NamesDB\";\nimport {Markup} from \"./Markup\";\nimport {NameCounts} from \"./NameCounts\";\n\nexport interface StatsProps\n{\n  machine: StatsMachine;\n}\n\nexport class StatsMachine\n{\n  @observable\n  private journal: string = \"\";\n\n  // private namesDB: NamesDB = new NamesDB();\n  @observable\n  public namesDict: Map<string, WordInfo> = new Map();\n\n  @observable\n  public dataFreshness: number = 0;\n\n  constructor(journal: string)\n  {\n    // this.journal = journal; //TODO\n    // this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and \" +\n    //   \"[!!Phil|Phil_Seo!!].\\n\\n1-2-20: And [!!Colin|Colin_Poler!!].\";\n    // this.makeStats();\n  }\n\n  @action\n  public onJournalInputChange = (e: any) => {\n    this.journal = e.currentTarget.value;\n  };\n\n  //remove null and empty pieces\n  private cleansePieces(pieces: string[]): string[]\n  {\n    const ret: string[] = []\n    pieces.forEach((piece: string) => {\n      if (piece == null || pieces === undefined)\n      {\n        return;\n      }\n      if (piece === \"\")\n      {\n        return;\n      }\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  @action\n  private makeNamesDict(pieces: string[]): void\n  {\n    pieces.forEach((piece: string) => {\n      if (Markup.isMarkup(piece))\n      {\n        const wordInfo: WordInfo | undefined = this.namesDict.get(piece);\n        if (wordInfo === undefined)\n        {\n          this.namesDict.set(piece,  new NameInfo(piece, 1));\n        }\n        else\n        {\n          wordInfo.count = wordInfo.count + 1;\n          this.namesDict.set(piece, wordInfo);\n        }\n      }\n    });\n    // this.namesDB\n\n    this.dataFreshness++;\n  }\n\n  public makeStats(): void\n  {\n    // const journal = document.getElementById(\"journalInputBox\").value();\n\n    let pieces: string[] = JournalReaderMachine.splitOnMarkupPieces(this.journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n}\n\n@observer\nexport class Stats extends React.Component<StatsProps>\n{\n  private get machine(): StatsMachine\n  {\n    return this.props.machine as StatsMachine;\n  }\n\n  render()\n  {\n    const x = this.machine.dataFreshness; //ignore\n\n    return <div>\n      <input type=\"text\" id=\"journalInputBox\" onChange={this.machine.onJournalInputChange}/>\n      <button onClick={() => this.machine.makeStats()}>Submit</button>\n\n      <NameCounts namesDict={this.machine.namesDict}/>\n    </div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}