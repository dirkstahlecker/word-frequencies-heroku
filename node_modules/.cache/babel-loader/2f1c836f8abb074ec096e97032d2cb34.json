{"ast":null,"code":"'use strict';\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/;\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/;\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/;\nvar INFINITY = /^-?infinity$/;\n\nmodule.exports = function parseDate(isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'));\n  }\n\n  var matches = DATE_TIME.exec(isoDate);\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null;\n  }\n\n  var isBC = !!matches[8];\n  var year = parseInt(matches[1], 10);\n\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  var hour = parseInt(matches[4], 10);\n  var minute = parseInt(matches[5], 10);\n  var second = parseInt(matches[6], 10);\n  var ms = matches[7];\n  ms = ms ? 1000 * parseFloat(ms) : 0;\n  var date;\n  var offset = timeZoneOffset(isoDate);\n\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms)); // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n\n    if (is0To99(year)) {\n      date.setUTCFullYear(year);\n    }\n\n    date.setTime(date.getTime() - offset);\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms);\n\n    if (is0To99(year)) {\n      date.setFullYear(year);\n    }\n  }\n\n  return date;\n};\n\nfunction getDate(isoDate) {\n  var matches = DATE.exec(isoDate);\n\n  if (!matches) {\n    return;\n  }\n\n  var year = parseInt(matches[1], 10);\n  var isBC = !!matches[4];\n\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3]; // YYYY-MM-DD will be parsed as local time\n\n  var date = new Date(year, month, day);\n\n  if (is0To99(year)) {\n    date.setFullYear(year);\n  }\n\n  return date;\n} // match timezones:\n// Z (UTC)\n// -05\n// +06:30\n\n\nfunction timeZoneOffset(isoDate) {\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1]);\n  if (!zone) return;\n  var type = zone[1];\n\n  if (type === 'Z') {\n    return 0;\n  }\n\n  var sign = type === '-' ? -1 : 1;\n  var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);\n  return offset * sign * 1000;\n}\n\nfunction bcYearToNegativeYear(year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1);\n}\n\nfunction is0To99(num) {\n  return num >= 0 && num < 100;\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/postgres-date/index.js"],"names":["DATE_TIME","DATE","TIME_ZONE","INFINITY","module","exports","parseDate","isoDate","test","Number","replace","matches","exec","getDate","isBC","year","parseInt","bcYearToNegativeYear","month","day","hour","minute","second","ms","parseFloat","date","offset","timeZoneOffset","Date","UTC","is0To99","setUTCFullYear","setTime","getTime","setFullYear","zone","split","type","sign","num"],"mappings":"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","sourcesContent":["'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    date.setTime(date.getTime() - offset)\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n"]},"metadata":{},"sourceType":"script"}