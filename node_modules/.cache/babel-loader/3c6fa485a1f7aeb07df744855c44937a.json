{"ast":null,"code":"'use strict';\n\nvar url = require('url'); //Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n//parses a connection string\n\n\nfunction parse(str) {\n  var config; //unix socket\n\n  if (str.charAt(0) === '/') {\n    config = str.split(' ');\n    return {\n      host: config[0],\n      database: config[1]\n    };\n  } // url parse expects spaces encoded as %20\n\n\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, \"%$1\");\n  }\n\n  var result = url.parse(str, true);\n  config = {};\n\n  if (result.query.application_name) {\n    config.application_name = result.query.application_name;\n  }\n\n  if (result.query.fallback_application_name) {\n    config.fallback_application_name = result.query.fallback_application_name;\n  }\n\n  config.port = result.port;\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n\n  config.host = result.hostname; // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n\n  var pathname = result.pathname;\n\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = result.pathname.slice(1) || null;\n  }\n\n  config.database = pathname && decodeURI(pathname);\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n  var ssl = result.query.ssl;\n\n  if (ssl === 'true' || ssl === '1') {\n    config.ssl = true;\n  }\n\n  return config;\n}\n\nmodule.exports = {\n  parse: parse\n};","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg-connection-string/index.js"],"names":["url","require","parse","str","config","charAt","split","host","database","test","encodeURI","replace","result","query","application_name","fallback_application_name","port","protocol","decodeURI","pathname","db","client_encoding","encoding","hostname","slice","auth","user","password","splice","join","ssl","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB,C,CAEA;AACA;AACA;AAEA;;;AACA,SAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIC,MAAJ,CADkB,CAElB;;AACA,MAAGD,GAAG,CAACE,MAAJ,CAAW,CAAX,MAAkB,GAArB,EAA0B;AACxBD,IAAAA,MAAM,GAAGD,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAT;AACA,WAAO;AAAEC,MAAAA,IAAI,EAAEH,MAAM,CAAC,CAAD,CAAd;AAAmBI,MAAAA,QAAQ,EAAEJ,MAAM,CAAC,CAAD;AAAnC,KAAP;AACD,GANiB,CAOlB;;;AACA,MAAG,mCAAmCK,IAAnC,CAAwCN,GAAxC,CAAH,EAAiD;AAC/CA,IAAAA,GAAG,GAAGO,SAAS,CAACP,GAAD,CAAT,CAAeQ,OAAf,CAAuB,aAAvB,EAAsC,KAAtC,CAAN;AACD;;AACD,MAAIC,MAAM,GAAGZ,GAAG,CAACE,KAAJ,CAAUC,GAAV,EAAe,IAAf,CAAb;AACAC,EAAAA,MAAM,GAAG,EAAT;;AAEA,MAAIQ,MAAM,CAACC,KAAP,CAAaC,gBAAjB,EAAmC;AACjCV,IAAAA,MAAM,CAACU,gBAAP,GAA0BF,MAAM,CAACC,KAAP,CAAaC,gBAAvC;AACD;;AACD,MAAIF,MAAM,CAACC,KAAP,CAAaE,yBAAjB,EAA4C;AAC1CX,IAAAA,MAAM,CAACW,yBAAP,GAAmCH,MAAM,CAACC,KAAP,CAAaE,yBAAhD;AACD;;AAEDX,EAAAA,MAAM,CAACY,IAAP,GAAcJ,MAAM,CAACI,IAArB;;AACA,MAAGJ,MAAM,CAACK,QAAP,IAAmB,SAAtB,EAAiC;AAC/Bb,IAAAA,MAAM,CAACG,IAAP,GAAcW,SAAS,CAACN,MAAM,CAACO,QAAR,CAAvB;AACAf,IAAAA,MAAM,CAACI,QAAP,GAAkBI,MAAM,CAACC,KAAP,CAAaO,EAA/B;AACAhB,IAAAA,MAAM,CAACiB,eAAP,GAAyBT,MAAM,CAACC,KAAP,CAAaS,QAAtC;AACA,WAAOlB,MAAP;AACD;;AACDA,EAAAA,MAAM,CAACG,IAAP,GAAcK,MAAM,CAACW,QAArB,CA5BkB,CA8BlB;AACA;;AACA,MAAIJ,QAAQ,GAAGP,MAAM,CAACO,QAAtB;;AACA,MAAIA,QAAQ,IAAIA,QAAQ,CAACd,MAAT,CAAgB,CAAhB,MAAuB,GAAvC,EAA4C;AAC1Cc,IAAAA,QAAQ,GAAGP,MAAM,CAACO,QAAP,CAAgBK,KAAhB,CAAsB,CAAtB,KAA4B,IAAvC;AACD;;AACDpB,EAAAA,MAAM,CAACI,QAAP,GAAkBW,QAAQ,IAAID,SAAS,CAACC,QAAD,CAAvC;AAEA,MAAIM,IAAI,GAAG,CAACb,MAAM,CAACa,IAAP,IAAe,GAAhB,EAAqBnB,KAArB,CAA2B,GAA3B,CAAX;AACAF,EAAAA,MAAM,CAACsB,IAAP,GAAcD,IAAI,CAAC,CAAD,CAAlB;AACArB,EAAAA,MAAM,CAACuB,QAAP,GAAkBF,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeC,IAAf,CAAoB,GAApB,CAAlB;AAEA,MAAIC,GAAG,GAAGlB,MAAM,CAACC,KAAP,CAAaiB,GAAvB;;AACA,MAAIA,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,GAA9B,EAAmC;AACjC1B,IAAAA,MAAM,CAAC0B,GAAP,GAAa,IAAb;AACD;;AAED,SAAO1B,MAAP;AACD;;AAED2B,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,KAAK,EAAEA;AADQ,CAAjB","sourcesContent":["'use strict';\n\nvar url = require('url');\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  var config;\n  //unix socket\n  if(str.charAt(0) === '/') {\n    config = str.split(' ');\n    return { host: config[0], database: config[1] };\n  }\n  // url parse expects spaces encoded as %20\n  if(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, \"%$1\");\n  }\n  var result = url.parse(str, true);\n  config = {};\n\n  if (result.query.application_name) {\n    config.application_name = result.query.application_name;\n  }\n  if (result.query.fallback_application_name) {\n    config.fallback_application_name = result.query.fallback_application_name;\n  }\n\n  config.port = result.port;\n  if(result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n  config.host = result.hostname;\n\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  var pathname = result.pathname;\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = result.pathname.slice(1) || null;\n  }\n  config.database = pathname && decodeURI(pathname);\n\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n\n  var ssl = result.query.ssl;\n  if (ssl === 'true' || ssl === '1') {\n    config.ssl = true;\n  }\n\n  return config;\n}\n\nmodule.exports = {\n  parse: parse\n};\n"]},"metadata":{},"sourceType":"script"}