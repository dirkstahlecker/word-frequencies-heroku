{"ast":null,"code":"import { Markup } from \"./Markup\"; // export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo {\n  constructor(word, count) {\n    this._word = void 0;\n    this._count = void 0;\n    this._word = word;\n    this._count = count;\n  }\n\n  get word() {\n    return this._word;\n  }\n\n  set word(value) {\n    this._word = value;\n  }\n\n  get count() {\n    return this._count;\n  }\n\n  set count(value) {\n    this._count = value;\n  }\n\n}\nexport class NameInfo extends WordInfo {\n  constructor(word, count) {\n    if (!Markup.isMarkup(word)) {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n\n    super(word, count);\n  }\n\n  set word(value) {\n    if (!Markup.isMarkup(value)) {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n\n    this._word = value;\n  }\n\n  get word() {\n    //we know it's markup since it's checked in the setter\n    return Markup.create(this._word).displayName;\n  }\n\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/NamesDB.ts"],"names":["Markup","WordInfo","constructor","word","count","_word","_count","value","NameInfo","isMarkup","Error","create","displayName"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,UAArB,C,CAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAN,CACP;AAIEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,KAAf,EACX;AAAA,SAJUC,KAIV;AAAA,SAHUC,MAGV;AACE,SAAKD,KAAL,GAAaF,IAAb;AACA,SAAKG,MAAL,GAAcF,KAAd;AACD;;AAED,MAAWD,IAAX,GACA;AACE,WAAO,KAAKE,KAAZ;AACD;;AAED,MAAWF,IAAX,CAAgBI,KAAhB,EACA;AACE,SAAKF,KAAL,GAAaE,KAAb;AACD;;AAED,MAAWH,KAAX,GACA;AACE,WAAO,KAAKE,MAAZ;AACD;;AAED,MAAWF,KAAX,CAAiBG,KAAjB,EACA;AACE,SAAKD,MAAL,GAAcC,KAAd;AACD;;AA5BH;AA+BA,OAAO,MAAMC,QAAN,SAAuBP,QAAvB,CACP;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,KAAf,EACX;AACE,QAAI,CAACJ,MAAM,CAACS,QAAP,CAAgBN,IAAhB,CAAL,EACA;AACE,YAAMO,KAAK,CAAC,uCAAD,CAAX;AACD;;AACD,UAAMP,IAAN,EAAYC,KAAZ;AACD;;AAED,MAAWD,IAAX,CAAgBI,KAAhB,EACA;AACE,QAAI,CAACP,MAAM,CAACS,QAAP,CAAgBF,KAAhB,CAAL,EACA;AACE,YAAMG,KAAK,CAAC,uCAAD,CAAX;AACD;;AACD,SAAKL,KAAL,GAAaE,KAAb;AACD;;AAED,MAAWJ,IAAX,GACA;AACE;AACA,WAAOH,MAAM,CAACW,MAAP,CAAc,KAAKN,KAAnB,EAA0BO,WAAjC;AACD;;AAvBH","sourcesContent":["import {Markup} from \"./Markup\";\n\n// export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo\n{\n  protected _word: string;\n  protected _count: number;\n\n  constructor(word: string, count: number)\n  {\n    this._word = word;\n    this._count = count;\n  }\n\n  public get word(): string\n  {\n    return this._word;\n  }\n\n  public set word(value: string)\n  {\n    this._word = value;\n  }\n\n  public get count(): number\n  {\n    return this._count;\n  }\n\n  public set count(value: number)\n  {\n    this._count = value;\n  }\n}\n\nexport class NameInfo extends WordInfo\n{\n  constructor(word: string, count: number)\n  {\n    if (!Markup.isMarkup(word))\n    {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n    super(word, count);\n  }\n\n  public set word(value: string)\n  {\n    if (!Markup.isMarkup(value))\n    {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n    this._word = value;\n  }\n\n  public get word(): string\n  {\n    //we know it's markup since it's checked in the setter\n    return Markup.create(this._word).displayName;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}