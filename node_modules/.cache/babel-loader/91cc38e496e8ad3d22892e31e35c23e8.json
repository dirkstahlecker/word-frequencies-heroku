{"ast":null,"code":"var _class;\n\nimport * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { JournalReaderMachine } from \"../JournalReader\";\nimport { WordInfo } from \"./NamesDB\";\nimport { Markup } from \"./Markup\";\nexport class StatsMachine {\n  //not observable - changing the journal needs a new stats object\n  // private namesDB: NamesDB = new NamesDB();\n  constructor(journal) {\n    this.journal = \"\";\n    this.namesDict = new Map();\n    // this.journal = journal; //TODO\n    this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and [!!Phil|Phil_Seo!!].\\n\\n1-2-20: Another.\";\n    this.makeStats();\n  } //remove null and empty pieces\n\n\n  cleansePieces(pieces) {\n    const ret = [];\n    pieces.forEach(piece => {\n      if (piece == null || pieces === undefined) {\n        return;\n      }\n\n      if (piece === \"\") {\n        return;\n      }\n\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  makeNamesDict(pieces) {\n    pieces.forEach(piece => {\n      if (Markup.isMarkup(piece)) {\n        if (this.namesDict.get(piece) === undefined) {\n          this.namesDict.set(piece, new WordInfo(piece, 1));\n        } else {// this.namesDict.set(piece).count = this.namesDict[piece].count++; //TODO\n        }\n      }\n    }); // this.namesDB\n  }\n\n  makeStats() {\n    let pieces = JournalReaderMachine.splitOnMarkupPieces(this.journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n\n}\nexport let Stats = observer(_class = class Stats extends React.Component {\n  get machine() {\n    return this.props.machine;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"Stats test\");\n  }\n\n}) || _class;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Stats.tsx"],"names":["React","observer","JournalReaderMachine","WordInfo","Markup","StatsMachine","constructor","journal","namesDict","Map","makeStats","cleansePieces","pieces","ret","forEach","piece","undefined","push","makeNamesDict","isMarkup","get","set","splitOnMarkupPieces","Stats","Component","machine","props","render"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,oBAAR,QAAmC,kBAAnC;AACA,SAAQC,QAAR,QAAuB,WAAvB;AACA,SAAQC,MAAR,QAAqB,UAArB;AAOA,OAAO,MAAMC,YAAN,CACP;AACgC;AAE9B;AAGAC,EAAAA,WAAW,CAACC,OAAD,EACX;AAAA,SANQA,OAMR,GAN0B,EAM1B;AAAA,SAHQC,SAGR,GAH2C,IAAIC,GAAJ,EAG3C;AACE;AACA,SAAKF,OAAL,GAAe,2FAAf;AACA,SAAKG,SAAL;AACD,GAXH,CAaE;;;AACQC,EAAAA,aAAR,CAAsBC,MAAtB,EACA;AACE,UAAMC,GAAa,GAAG,EAAtB;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAmB;AAChC,UAAIA,KAAK,IAAI,IAAT,IAAiBH,MAAM,KAAKI,SAAhC,EACA;AACE;AACD;;AACD,UAAID,KAAK,KAAK,EAAd,EACA;AACE;AACD;;AACDF,MAAAA,GAAG,CAACI,IAAJ,CAASF,KAAT;AACD,KAVD;AAWA,WAAOF,GAAP;AACD;;AAEOK,EAAAA,aAAR,CAAsBN,MAAtB,EACA;AACEA,IAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAmB;AAChC,UAAIX,MAAM,CAACe,QAAP,CAAgBJ,KAAhB,CAAJ,EACA;AACE,YAAI,KAAKP,SAAL,CAAeY,GAAf,CAAmBL,KAAnB,MAA8BC,SAAlC,EACA;AACE,eAAKR,SAAL,CAAea,GAAf,CAAmBN,KAAnB,EAA2B,IAAIZ,QAAJ,CAAaY,KAAb,EAAoB,CAApB,CAA3B;AACD,SAHD,MAKA,CACE;AACD;AACF;AACF,KAZD,EADF,CAcE;AACD;;AAEOL,EAAAA,SAAR,GACA;AACE,QAAIE,MAAgB,GAAGV,oBAAoB,CAACoB,mBAArB,CAAyC,KAAKf,OAA9C,CAAvB;AACAK,IAAAA,MAAM,GAAG,KAAKD,aAAL,CAAmBC,MAAnB,CAAT;AACA,SAAKM,aAAL,CAAmBN,MAAnB;AACD;;AAtDH;AA0DA,WAAaW,KAAb,GADCtB,QACD,UADA,MACasB,KADb,SAC2BvB,KAAK,CAACwB,SADjC,CAEA;AACE,MAAYC,OAAZ,GACA;AACE,WAAO,KAAKC,KAAL,CAAWD,OAAlB;AACD;;AAEDE,EAAAA,MAAM,GACN;AACE,wBAAO,uDAAP;AACD;;AATH,CADA","sourcesContent":["import * as React from \"react\";\nimport {observable, runInAction} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {JournalReaderMachine} from \"../JournalReader\";\nimport {WordInfo} from \"./NamesDB\";\nimport {Markup} from \"./Markup\";\n\nexport interface StatsProps\n{\n  machine: StatsMachine;\n}\n\nexport class StatsMachine\n{\n  private journal: string = \"\"; //not observable - changing the journal needs a new stats object\n\n  // private namesDB: NamesDB = new NamesDB();\n  private namesDict: Map<string, WordInfo> = new Map();\n\n  constructor(journal: string)\n  {\n    // this.journal = journal; //TODO\n    this.journal = \"1-1-20: Test journal [!!Colin|Colin_Poler!!] and [!!Phil|Phil_Seo!!].\\n\\n1-2-20: Another.\";\n    this.makeStats();\n  }\n\n  //remove null and empty pieces\n  private cleansePieces(pieces: string[]): string[]\n  {\n    const ret: string[] = []\n    pieces.forEach((piece: string) => {\n      if (piece == null || pieces === undefined)\n      {\n        return;\n      }\n      if (piece === \"\")\n      {\n        return;\n      }\n      ret.push(piece);\n    });\n    return ret;\n  }\n\n  private makeNamesDict(pieces: string[]): void\n  {\n    pieces.forEach((piece: string) => {\n      if (Markup.isMarkup(piece))\n      {\n        if (this.namesDict.get(piece) === undefined)\n        {\n          this.namesDict.set(piece,  new WordInfo(piece, 1));\n        }\n        else\n        {\n          // this.namesDict.set(piece).count = this.namesDict[piece].count++; //TODO\n        }\n      }\n    });\n    // this.namesDB\n  }\n\n  private makeStats(): void\n  {\n    let pieces: string[] = JournalReaderMachine.splitOnMarkupPieces(this.journal);\n    pieces = this.cleansePieces(pieces);\n    this.makeNamesDict(pieces);\n  }\n}\n\n@observer\nexport class Stats extends React.Component<StatsProps>\n{\n  private get machine(): StatsMachine\n  {\n    return this.props.machine as StatsMachine;\n  }\n\n  render()\n  {\n    return <>Stats test</>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}