{"ast":null,"code":"var _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Markup.tsx\";\nimport * as React from \"react\"; //stores a markup object\n\nexport class Markup {\n  //eslint-disable-next-line no-useless-escape\n  static getMarkupPieces(markup) {\n    return Markup.MARKUP_REGEX.exec(markup);\n  }\n\n  static isMarkup(rawString) {\n    return Markup.MARKUP_REGEX.test(rawString);\n  }\n\n  constructor(displayName, firstName, lastName) {\n    this._displayName = void 0;\n    this._firstName = void 0;\n    this._lastName = void 0;\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  static create(rawString) {\n    const pieces = Markup.getMarkupPieces(rawString);\n\n    if (pieces == null || pieces.length !== 4) {\n      throw Error(\"Invalid markup\");\n    }\n\n    const markupClass = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  get firstName() {\n    return this._firstName;\n  }\n\n  get lastName() {\n    return this._lastName;\n  }\n\n  get displayName() {\n    return this._displayName;\n  }\n\n  static getHtmlForMarkup(markup) {\n    if (markup == null || markup.firstName == null || markup.lastName == null || markup.displayName == null) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"rendered-markup-display-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }\n    }, markup.displayName, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 4\n      }\n    }, markup.firstName, \"\\xA0\", markup.lastName));\n  }\n\n}\nMarkup.MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Markup.tsx"],"names":["React","Markup","getMarkupPieces","markup","MARKUP_REGEX","exec","isMarkup","rawString","test","constructor","displayName","firstName","lastName","_displayName","_firstName","_lastName","create","pieces","length","Error","markupClass","getHtmlForMarkup"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,OAAO,MAAMC,MAAN,CACP;AACE;AAOA,SAAcC,eAAd,CAA8BC,MAA9B,EACA;AACE,WAAOF,MAAM,CAACG,YAAP,CAAoBC,IAApB,CAAyBF,MAAzB,CAAP;AACD;;AAED,SAAcG,QAAd,CAAuBC,SAAvB,EACA;AACE,WAAON,MAAM,CAACG,YAAP,CAAoBI,IAApB,CAAyBD,SAAzB,CAAP;AACD;;AAEOE,EAAAA,WAAR,CAAoBC,WAApB,EAAyCC,SAAzC,EAA4DC,QAA5D,EACA;AAAA,SAfQC,YAeR;AAAA,SAdQC,UAcR;AAAA,SAbQC,SAaR;AACE,SAAKD,UAAL,GAAkBH,SAAlB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKC,YAAL,GAAoBH,WAApB;AACD;;AAED,SAAcM,MAAd,CAAqBT,SAArB,EACA;AACE,UAAMU,MAA8B,GAAGhB,MAAM,CAACC,eAAP,CAAuBK,SAAvB,CAAvC;;AACA,QAAIU,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACC,MAAP,KAAkB,CAAxC,EACA;AACE,YAAMC,KAAK,CAAC,gBAAD,CAAX;AACD;;AAED,UAAMC,WAAmB,GAAG,IAAInB,MAAJ,CAAWgB,MAAM,CAAC,CAAD,CAAjB,EAAsBA,MAAM,CAAC,CAAD,CAA5B,EAAiCA,MAAM,CAAC,CAAD,CAAvC,CAA5B;AACA,WAAOG,WAAP;AACD;;AAED,MAAWT,SAAX,GACA;AACE,WAAO,KAAKG,UAAZ;AACD;;AAED,MAAWF,QAAX,GACA;AACE,WAAO,KAAKG,SAAZ;AACD;;AAED,MAAWL,WAAX,GACA;AACE,WAAO,KAAKG,YAAZ;AACD;;AAEF,SAAcQ,gBAAd,CAA+BlB,MAA/B,EACA;AACC,QAAIA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACQ,SAAP,IAAoB,IAAtC,IAA8CR,MAAM,CAACS,QAAP,IAAmB,IAAjE,IAAyET,MAAM,CAACO,WAAP,IAAsB,IAAnG,EACA;AACC,aAAO,IAAP;AACA;;AAED,wBAAO;AAAM,MAAA,SAAS,EAAC,8BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACLP,MAAM,CAACO,WADF,eAEN;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEP,MAAM,CAACQ,SADT,UAC0BR,MAAM,CAACS,QADjC,CAFM,CAAP;AAMA;;AAjEF;AADaX,M,CAGEG,Y,GAAe,mC","sourcesContent":["import * as React from \"react\";\n\n//stores a markup object\nexport class Markup\n{\n  //eslint-disable-next-line no-useless-escape\n\tpublic static MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;\n\n  private _displayName: string;\n  private _firstName: string;\n  private _lastName: string;\n\n  public static getMarkupPieces(markup: string): RegExpExecArray | null\n  {\n    return Markup.MARKUP_REGEX.exec(markup);\n  }\n\n  public static isMarkup(rawString: string): boolean\n  {\n    return Markup.MARKUP_REGEX.test(rawString);\n  }\n\n  private constructor(displayName: string, firstName: string, lastName: string)\n  {\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  public static create(rawString: string): Markup\n  {\n    const pieces: RegExpExecArray | null = Markup.getMarkupPieces(rawString);\n    if (pieces == null || pieces.length !== 4)\n    {\n      throw Error(\"Invalid markup\");\n    }\n\n    const markupClass: Markup = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  public get firstName(): string\n  {\n    return this._firstName;\n  }\n\n  public get lastName(): string\n  {\n    return this._lastName;\n  }\n\n  public get displayName(): string\n  {\n    return this._displayName;\n  }\n\n\tpublic static getHtmlForMarkup(markup: Markup): JSX.Element | null\n\t{\n\t\tif (markup == null || markup.firstName == null || markup.lastName == null || markup.displayName == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\treturn <span className=\"rendered-markup-display-name\">\n\t\t\t{markup.displayName}\n\t\t\t<span className=\"tooltip\">\n\t\t\t\t{markup.firstName}&nbsp;{markup.lastName}\n\t\t\t</span>\n\t\t</span>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}