{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nconst crypto = require('crypto');\n\nconst defaults = require('./defaults');\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  return '\"' + escaped + '\"';\n} // convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\n\n\nfunction arrayString(val) {\n  var result = '{';\n\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ',';\n    }\n\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL';\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i]);\n    } else if (val[i] instanceof Buffer) {\n      result += '\\\\\\\\x' + val[i].toString('hex');\n    } else {\n      result += escapeElement(prepareValue(val[i]));\n    }\n  }\n\n  result = result + '}';\n  return result;\n} // converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\n\n\nvar prepareValue = function (val, seen) {\n  if (val instanceof Buffer) {\n    return val;\n  }\n\n  if (ArrayBuffer.isView(val)) {\n    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength);\n\n    if (buf.length === val.byteLength) {\n      return buf;\n    }\n\n    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength); // Node.js v4 does not support those Buffer.from params\n  }\n\n  if (val instanceof Date) {\n    if (defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val);\n    } else {\n      return dateToString(val);\n    }\n  }\n\n  if (Array.isArray(val)) {\n    return arrayString(val);\n  }\n\n  if (val === null || typeof val === 'undefined') {\n    return null;\n  }\n\n  if (typeof val === 'object') {\n    return prepareObject(val, seen);\n  }\n\n  return val.toString();\n};\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || [];\n\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query');\n    }\n\n    seen.push(val);\n    return prepareValue(val.toPostgres(prepareValue), seen);\n  }\n\n  return JSON.stringify(val);\n}\n\nfunction pad(number, digits) {\n  number = '' + number;\n\n  while (number.length < digits) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset();\n  var year = date.getFullYear();\n  var isBCYear = year < 1;\n  if (isBCYear) year = Math.abs(year) + 1; // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' + pad(date.getMonth() + 1, 2) + '-' + pad(date.getDate(), 2) + 'T' + pad(date.getHours(), 2) + ':' + pad(date.getMinutes(), 2) + ':' + pad(date.getSeconds(), 2) + '.' + pad(date.getMilliseconds(), 3);\n\n  if (offset < 0) {\n    ret += '-';\n    offset *= -1;\n  } else {\n    ret += '+';\n  }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2);\n  if (isBCYear) ret += ' BC';\n  return ret;\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear();\n  var isBCYear = year < 1;\n  if (isBCYear) year = Math.abs(year) + 1; // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' + pad(date.getUTCMonth() + 1, 2) + '-' + pad(date.getUTCDate(), 2) + 'T' + pad(date.getUTCHours(), 2) + ':' + pad(date.getUTCMinutes(), 2) + ':' + pad(date.getUTCSeconds(), 2) + '.' + pad(date.getUTCMilliseconds(), 3);\n  ret += '+00:00';\n  if (isBCYear) ret += ' BC';\n  return ret;\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? {\n    text: config\n  } : config;\n\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values;\n    } else {\n      config.values = values;\n    }\n  }\n\n  if (callback) {\n    config.callback = callback;\n  }\n\n  return config;\n}\n\nconst md5 = function (string) {\n  return crypto.createHash('md5').update(string, 'utf-8').digest('hex');\n}; // See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\n\n\nconst postgresMd5PasswordHash = function (user, password, salt) {\n  var inner = md5(password + user);\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]));\n  return 'md5' + outer;\n};\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value);\n  },\n  normalizeQueryConfig,\n  postgresMd5PasswordHash,\n  md5\n};","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/utils.js"],"names":["crypto","require","defaults","escapeElement","elementRepresentation","escaped","replace","arrayString","val","result","i","length","Array","isArray","Buffer","toString","prepareValue","seen","ArrayBuffer","isView","buf","from","buffer","byteOffset","byteLength","slice","Date","parseInputDatesAsUTC","dateToStringUTC","dateToString","prepareObject","toPostgres","indexOf","Error","push","JSON","stringify","pad","number","digits","date","offset","getTimezoneOffset","year","getFullYear","isBCYear","Math","abs","ret","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","floor","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","normalizeQueryConfig","config","values","callback","text","md5","string","createHash","update","digest","postgresMd5PasswordHash","user","password","salt","inner","outer","concat","module","exports","prepareValueWrapper","value"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nconst crypto = require('crypto')\n\nconst defaults = require('./defaults')\n\nfunction escapeElement (elementRepresentation) {\n  var escaped = elementRepresentation\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString (val) {\n  var result = '{'\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (val[i] instanceof Buffer) {\n      result += '\\\\\\\\x' + val[i].toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val, seen) {\n  if (val instanceof Buffer) {\n    return val\n  }\n  if (ArrayBuffer.isView(val)) {\n    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n    if (buf.length === val.byteLength) {\n      return buf\n    }\n    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n  }\n  if (val instanceof Date) {\n    if (defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val)\n    } else {\n      return dateToString(val)\n    }\n  }\n  if (Array.isArray(val)) {\n    return arrayString(val)\n  }\n  if (val === null || typeof val === 'undefined') {\n    return null\n  }\n  if (typeof val === 'object') {\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject (val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction pad (number, digits) {\n  number = '' + number\n  while (number.length < digits) { number = '0' + number }\n  return number\n}\n\nfunction dateToString (date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' +\n    pad(date.getMonth() + 1, 2) + '-' +\n    pad(date.getDate(), 2) + 'T' +\n    pad(date.getHours(), 2) + ':' +\n    pad(date.getMinutes(), 2) + ':' +\n    pad(date.getSeconds(), 2) + '.' +\n    pad(date.getMilliseconds(), 3)\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else { ret += '+' }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2)\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC (date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' +\n    pad(date.getUTCMonth() + 1, 2) + '-' +\n    pad(date.getUTCDate(), 2) + 'T' +\n    pad(date.getUTCHours(), 2) + ':' +\n    pad(date.getUTCMinutes(), 2) + ':' +\n    pad(date.getUTCSeconds(), 2) + '.' +\n    pad(date.getUTCMilliseconds(), 3)\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig (config, values, callback) {\n  // can take in strings or config objects\n  config = (typeof (config) === 'string') ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\nconst md5 = function (string) {\n  return crypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nconst postgresMd5PasswordHash = function (user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper (value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  postgresMd5PasswordHash,\n  md5\n}\n"]},"metadata":{},"sourceType":"script"}