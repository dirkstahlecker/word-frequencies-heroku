{"ast":null,"code":"'use strict';\n\nmodule.exports = function parseBytea(input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex');\n  }\n\n  var output = '';\n  var i = 0;\n\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i];\n      ++i;\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8));\n        i += 4;\n      } else {\n        var backslashes = 1;\n\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++;\n        }\n\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\';\n        }\n\n        i += Math.floor(backslashes / 2) * 2;\n      }\n    }\n  }\n\n  return new Buffer(output, 'binary');\n};","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/postgres-bytea/index.js"],"names":["module","exports","parseBytea","input","test","Buffer","substr","output","i","length","String","fromCharCode","parseInt","backslashes","k","Math","floor"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAC3C,MAAI,OAAOC,IAAP,CAAYD,KAAZ,CAAJ,EAAwB;AACtB;AACA,WAAO,IAAIE,MAAJ,CAAWF,KAAK,CAACG,MAAN,CAAa,CAAb,CAAX,EAA4B,KAA5B,CAAP;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGL,KAAK,CAACM,MAAjB,EAAyB;AACvB,QAAIN,KAAK,CAACK,CAAD,CAAL,KAAa,IAAjB,EAAuB;AACrBD,MAAAA,MAAM,IAAIJ,KAAK,CAACK,CAAD,CAAf;AACA,QAAEA,CAAF;AACD,KAHD,MAGO;AACL,UAAI,WAAWJ,IAAX,CAAgBD,KAAK,CAACG,MAAN,CAAaE,CAAC,GAAG,CAAjB,EAAoB,CAApB,CAAhB,CAAJ,EAA6C;AAC3CD,QAAAA,MAAM,IAAIG,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACT,KAAK,CAACG,MAAN,CAAaE,CAAC,GAAG,CAAjB,EAAoB,CAApB,CAAD,EAAyB,CAAzB,CAA5B,CAAV;AACAA,QAAAA,CAAC,IAAI,CAAL;AACD,OAHD,MAGO;AACL,YAAIK,WAAW,GAAG,CAAlB;;AACA,eAAOL,CAAC,GAAGK,WAAJ,GAAkBV,KAAK,CAACM,MAAxB,IAAkCN,KAAK,CAACK,CAAC,GAAGK,WAAL,CAAL,KAA2B,IAApE,EAA0E;AACxEA,UAAAA,WAAW;AACZ;;AACD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAG,CAAzB,CAApB,EAAiD,EAAEC,CAAnD,EAAsD;AACpDP,UAAAA,MAAM,IAAI,IAAV;AACD;;AACDC,QAAAA,CAAC,IAAIO,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAG,CAAzB,IAA8B,CAAnC;AACD;AACF;AACF;;AACD,SAAO,IAAIR,MAAJ,CAAWE,MAAX,EAAmB,QAAnB,CAAP;AACD,CA5BD","sourcesContent":["'use strict'\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n"]},"metadata":{},"sourceType":"script"}