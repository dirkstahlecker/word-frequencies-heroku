{"ast":null,"code":"//stores a markup object\nexport class Markup {\n  //eslint-disable-next-line no-useless-escape\n  //\n  // public static create(displayName: string, firstName: string, lastName: string): void\n  // {\n  //   this._firstName = firstName;\n  //   this._lastName = lastName;\n  //   this._displayName = displayName;\n  // }\n  constructor(displayName, firstName, lastName) {\n    this._displayName = void 0;\n    this._firstName = void 0;\n    this._lastName = void 0;\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  static create(rawString) {\n    const pieces = MarkupUtils.getMarkupPieces(rawText);\n\n    if (pieces == null || pieces.length !== 4) {\n      return null;\n    }\n\n    const markupClass = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  get firstName() {\n    return this._firstName;\n  }\n\n  get lastName() {\n    return this._lastName;\n  }\n\n  get displayName() {\n    return this._displayName;\n  }\n\n}\nMarkup.MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Markup.ts"],"names":["Markup","constructor","displayName","firstName","lastName","_displayName","_firstName","_lastName","create","rawString","pieces","MarkupUtils","getMarkupPieces","rawText","length","markupClass","MARKUP_REGEX"],"mappings":"AAAA;AACA,OAAO,MAAeA,MAAf,CACP;AACE;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEQC,EAAAA,WAAR,CAAoBC,WAApB,EAAyCC,SAAzC,EAA4DC,QAA5D,EACA;AAAA,SAZQC,YAYR;AAAA,SAXQC,UAWR;AAAA,SAVQC,SAUR;AACE,SAAKD,UAAL,GAAkBH,SAAlB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKC,YAAL,GAAoBH,WAApB;AACD;;AAED,SAAcM,MAAd,CAAqBC,SAArB,EACA;AACE,UAAMC,MAA8B,GAAGC,WAAW,CAACC,eAAZ,CAA4BC,OAA5B,CAAvC;;AACA,QAAIH,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACI,MAAP,KAAkB,CAAxC,EACA;AACE,aAAO,IAAP;AACD;;AAED,UAAMC,WAAmB,GAAG,IAAIf,MAAJ,CAAWU,MAAM,CAAC,CAAD,CAAjB,EAAsBA,MAAM,CAAC,CAAD,CAA5B,EAAiCA,MAAM,CAAC,CAAD,CAAvC,CAA5B;AACA,WAAOK,WAAP;AACD;;AAED,MAAWZ,SAAX,GACA;AACE,WAAO,KAAKG,UAAZ;AACD;;AAED,MAAWF,QAAX,GACA;AACE,WAAO,KAAKG,SAAZ;AACD;;AAED,MAAWL,WAAX,GACA;AACE,WAAO,KAAKG,YAAZ;AACD;;AA/CH;AADsBL,M,CAGPgB,Y,GAAe,mC","sourcesContent":["//stores a markup object\nexport abstract class Markup\n{\n  //eslint-disable-next-line no-useless-escape\n\tpublic static MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;\n\n  private _displayName: string;\n  private _firstName: string;\n  private _lastName: string;\n  //\n  // public static create(displayName: string, firstName: string, lastName: string): void\n  // {\n  //   this._firstName = firstName;\n  //   this._lastName = lastName;\n  //   this._displayName = displayName;\n  // }\n\n  private constructor(displayName: string, firstName: string, lastName: string)\n  {\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  public static create(rawString: string): Markup | null\n  {\n    const pieces: RegExpExecArray | null = MarkupUtils.getMarkupPieces(rawText);\n    if (pieces == null || pieces.length !== 4)\n    {\n      return null\n    }\n\n    const markupClass: Markup = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  public get firstName(): string\n  {\n    return this._firstName;\n  }\n\n  public get lastName(): string\n  {\n    return this._lastName;\n  }\n\n  public get displayName(): string\n  {\n    return this._displayName;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}