{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _descriptor2,\n    _descriptor3,\n    _descriptor4,\n    _descriptor5,\n    _descriptor6,\n    _descriptor7,\n    _temp,\n    _class3,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalWriter.tsx\";\n\nimport * as React from \"react\";\nimport { observable, action, computed } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { NamePickerModal, NamePickerModalMachine } from \"./NamePickerModal\";\nimport { MarkupUtils } from \"./MarkupUtils\";\nimport { AddMarkupMachine } from \"./AddMarkupToExistingEntry\";\nimport { NameReference } from \"./NameReference\";\nexport let JournalWriterMachine = (_class = (_temp = class JournalWriterMachine {\n  constructor() {\n    _initializerDefineProperty(this, \"journalText\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"currentName\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"finalText\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"dateStr\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"isDeepDiveEntry\", _descriptor5, this);\n\n    this.modalObj = null;\n    this.addMarkupMachine = new AddMarkupMachine();\n\n    _initializerDefineProperty(this, \"updateDate\", _descriptor6, this);\n\n    this.namePickerModalMachine = new NamePickerModalMachine();\n\n    _initializerDefineProperty(this, \"updateJournalText\", _descriptor7, this);\n  }\n\n  createFinalText() {\n    const deepDive = this.finalText = this.dateStr + \": \" + this.journalText;\n  }\n\n  setCurrentName(value) {\n    this.currentName = value;\n  }\n\n  get showModal() {\n    return this.currentName != null;\n  }\n\n  handleModalCloseRequest(commit) {\n    if (!commit) //close without adding markup\n      {\n        this.currentName = null;\n        return;\n      }\n\n    if (this.currentName == null) {\n      throw Error(\"name shouldn't be null\");\n    } //take the last name given by the user and insert the proper markup into the box itself\n\n\n    let realFirstName = this.namePickerModalMachine.realFirstName;\n    const markup = MarkupUtils.makeMarkup(realFirstName != null ? realFirstName : this.currentName, this.namePickerModalMachine.lastName, this.currentName);\n    const textLen = this.journalText.length;\n    const previousJournalText = this.journalText; //add the markup in place of the name\n\n    this.journalText = previousJournalText.substring(0, textLen - this.currentName.length - 1) + markup + previousJournalText.substring(textLen - 1, textLen); //clean up\n\n    this.currentName = null; //close the modal\n\n    this.namePickerModalMachine.lastName = \"\"; //reset\n\n    this.namePickerModalMachine.realFirstName = null;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"journalText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"currentName\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"finalText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"dateStr\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"isDeepDiveEntry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"updateDate\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      this.dateStr = e.currentTarget.value;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"createFinalText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"createFinalText\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setCurrentName\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setCurrentName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"showModal\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"showModal\"), _class.prototype), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"updateJournalText\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return e => {\n      this.journalText = e.currentTarget.value;\n      let text = this.journalText;\n      let lastWord;\n      let lastCharacter = text.substring(text.length - 1, text.length);\n\n      if (lastCharacter === \" \") {\n        text = text.substring(0, text.length - 1); //remove trailing space\n\n        lastWord = text.substring(Math.max(text.lastIndexOf(\" \"), text.lastIndexOf(\"\\n\")), text.length);\n        lastWord = lastWord + \" \"; //add space back in for the rest of the logic to work properly\n      } else {\n        lastWord = text.substring(Math.max(text.lastIndexOf(\" \"), text.lastIndexOf(\"\\n\")), text.length);\n      } //names must be preceeded by a space or newline and followed by a word split character\n\n\n      if (AddMarkupMachine.wordSplitCharacters.indexOf(lastWord.substring(lastWord.length - 1, lastWord.length)) > -1) //last character is a word split character\n        {\n          lastWord = NameReference.cleanWord(lastWord.substring(0, lastWord.length - 1)); //remove the final character to get just the name\n\n          if (NameReference.isName(lastWord)) {\n            this.currentName = lastWord;\n          }\n        }\n    };\n  }\n})), _class);\nexport let JournalWriter = observer(_class3 = class JournalWriter extends React.Component {\n  get machine() {\n    return this.props.machine;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NamePickerModal, {\n      machine: this.props.machine.namePickerModalMachine,\n      onRequestClose: commit => this.props.machine.handleModalCloseRequest(commit),\n      isOpen: this.props.machine.showModal,\n      currentName: this.props.machine.currentName == null ? \"\" : this.props.machine.currentName,\n      ref: x => this.props.machine.modalObj = x,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"dateEntry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 4\n      }\n    }, \"Date: \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"dateEntry\",\n      onChange: this.machine.updateDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"deepDiveCheckbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 4\n      }\n    }, \"Deep Dive?\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"deepDiveCheckbox\",\n      value: this.machine.isDeepDiveEntry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"journalEntry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 4\n      }\n    }, \"Entry: \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"journalEntry\",\n      value: this.props.machine.journalText,\n      onChange: e => this.props.machine.updateJournalText(e),\n      style: {\n        width: \"90%\",\n        height: \"200px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: e => this.props.machine.createFinalText(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 4\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"50%\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n        whiteSpace: \"pre-wrap\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, this.props.machine.finalText));\n  }\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n  }\n\n  componentDidMount() {\n    //roughly every month, suggest doing a deep dive journal entry\n    if (this.getRandomInt(0, 30) === 0) {\n      alert(\"You should do a deep dive entry today!\");\n    }\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalWriter.tsx"],"names":["React","observable","action","computed","observer","NamePickerModal","NamePickerModalMachine","MarkupUtils","AddMarkupMachine","NameReference","JournalWriterMachine","modalObj","addMarkupMachine","namePickerModalMachine","createFinalText","deepDive","finalText","dateStr","journalText","setCurrentName","value","currentName","showModal","handleModalCloseRequest","commit","Error","realFirstName","markup","makeMarkup","lastName","textLen","length","previousJournalText","substring","e","currentTarget","text","lastWord","lastCharacter","Math","max","lastIndexOf","wordSplitCharacters","indexOf","cleanWord","isName","JournalWriter","Component","machine","props","render","x","updateDate","isDeepDiveEntry","updateJournalText","width","height","display","verticalAlign","whiteSpace","getRandomInt","min","ceil","floor","random","componentDidMount","alert"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {observable, action, computed} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {NamePickerModal, NamePickerModalMachine} from \"./NamePickerModal\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport {AddMarkupMachine} from \"./AddMarkupToExistingEntry\";\nimport {NameReference} from \"./NameReference\";\n\nexport class JournalWriterMachine\n{\n\t@observable\n\tpublic journalText: string = \"\";\n\n\t@observable\n\tpublic currentName: string | null = null;\n\n\t@observable\n\tpublic finalText: string = \"\";\n\n\t@observable\n\tprivate dateStr: string = \"\";\n\n\t@observable\n\tpublic isDeepDiveEntry: boolean = false;\n\n\tpublic modalObj: NamePickerModal | null = null;\n\n\tpublic addMarkupMachine: AddMarkupMachine = new AddMarkupMachine();\n\n\t@action\n\tpublic updateDate = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\tthis.dateStr = e.currentTarget.value;\n\t};\n\n\t@action\n\tpublic createFinalText(): void\n\t{\n\t\tconst deepDive: boolean =\n\t\tthis.finalText = this.dateStr + \": \" + this.journalText;\n\t}\n\n\t@action\n\tpublic setCurrentName(value: string | null): void\n\t{\n\t\tthis.currentName = value;\n\t}\n\n\tpublic namePickerModalMachine: NamePickerModalMachine = new NamePickerModalMachine();\n\n\t@computed\n\tpublic get showModal(): boolean\n\t{\n\t\treturn this.currentName != null;\n\t}\n\n\tpublic handleModalCloseRequest(commit: boolean): void\n\t{\n\t\tif (!commit) //close without adding markup\n\t\t{\n\t\t  this.currentName = null;\n\t\t  return;\n\t\t}\n\t\tif (this.currentName == null)\n\t\t{\n\t\t  throw Error(\"name shouldn't be null\");\n\t\t}\n\t\t//take the last name given by the user and insert the proper markup into the box itself\n\t\tlet realFirstName: string | null = this.namePickerModalMachine.realFirstName;\n\t\tconst markup: string = MarkupUtils.makeMarkup(realFirstName != null ? realFirstName : this.currentName, this.namePickerModalMachine.lastName, this.currentName);\n\t\tconst textLen: number = this.journalText.length;\n\t\tconst previousJournalText: string = this.journalText;\n\t\t//add the markup in place of the name\n\t\tthis.journalText = previousJournalText.substring(0, textLen - this.currentName.length - 1) + markup +  previousJournalText.substring(textLen - 1, textLen);\n\n\t\t//clean up\n\t\tthis.currentName = null; //close the modal\n\t\tthis.namePickerModalMachine.lastName = \"\"; //reset\n\t\tthis.namePickerModalMachine.realFirstName = null;\n\t}\n\n\t@action\n\tpublic updateJournalText = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n\t\tthis.journalText = e.currentTarget.value;\n\n\t\tlet text: string = this.journalText;\n\t\tlet lastWord: string;\n\t\tlet lastCharacter: string = text.substring(text.length - 1, text.length);\n\t\tif (lastCharacter === \" \")\n\t\t{\n\t\t\ttext = text.substring(0, text.length - 1); //remove trailing space\n\t\t\tlastWord = text.substring(Math.max(text.lastIndexOf(\" \"), text.lastIndexOf(\"\\n\")), text.length);\n\t\t\tlastWord = lastWord + \" \"; //add space back in for the rest of the logic to work properly\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlastWord = text.substring(Math.max(text.lastIndexOf(\" \"), text.lastIndexOf(\"\\n\")), text.length);\n\t\t}\n\n\t\t//names must be preceeded by a space or newline and followed by a word split character\n\t\tif (AddMarkupMachine.wordSplitCharacters.indexOf(lastWord.substring(lastWord.length - 1, lastWord.length)) > -1) //last character is a word split character\n\t\t{\n\t\t\tlastWord = NameReference.cleanWord(lastWord.substring(0, lastWord.length - 1)); //remove the final character to get just the name\n\t\t\tif (NameReference.isName(lastWord))\n\t\t\t{\n\t\t\t\tthis.currentName = lastWord;\n\t\t\t}\n\t\t}\n\t};\n\n\n}\n\nexport interface JournalWriterProps\n{\n\tmachine: JournalWriterMachine;\n}\n\n@observer\nexport class JournalWriter extends React.Component<JournalWriterProps>\n{\n\tprivate get machine(): JournalWriterMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n\trender()\n\t{\n\t\treturn <>\n\t\t\t<NamePickerModal\n\t\t\t\tmachine={this.props.machine.namePickerModalMachine}\n\t\t\t\tonRequestClose={(commit: boolean) => this.props.machine.handleModalCloseRequest(commit)}\n\t\t\t\tisOpen={this.props.machine.showModal}\n\t\t\t\tcurrentName={this.props.machine.currentName == null ? \"\" : this.props.machine.currentName}\n\t\t\t\tref={(x) => this.props.machine.modalObj = x}\n\t\t\t/>\n\n\t\t\t<label htmlFor=\"dateEntry\">Date: </label>\n\t\t\t<br />\n\t\t\t<input type=\"text\" id=\"dateEntry\" onChange={this.machine.updateDate} />\n\t\t\t<label htmlFor=\"deepDiveCheckbox\">Deep Dive?</label>\n\t\t\t<input type=\"checkbox\" id=\"deepDiveCheckbox\" value={this.machine.isDeepDiveEntry}/>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<label htmlFor=\"journalEntry\">Entry: </label>\n\t\t\t<br />\n\t\t\t<textarea id=\"journalEntry\"\n\t\t\t          value={this.props.machine.journalText}\n\t\t\t          onChange={(e) => this.props.machine.updateJournalText(e)}\n\t\t\t          style={{width: \"90%\", height: \"200px\"}}\n\t\t\t/>\n\t\t\t{/*<MyEditor />*/}\n\t\t\t<br />\n\t\t\t<button onClick={(e) => this.props.machine.createFinalText()}>Submit</button>\n\n      <div style={{width: \"50%\", display: \"inline-block\", verticalAlign: \"top\", whiteSpace: \"pre-wrap\"}}>\n        {this.props.machine.finalText}\n      </div>\n\t\t</>;\n\t}\n\n\tprivate getRandomInt(min: number, max: number): number\n\t{\n\t\tmin = Math.ceil(min);\n\t\tmax = Math.floor(max);\n\t\treturn Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\t//roughly every month, suggest doing a deep dive journal entry\n\t\tif (this.getRandomInt(0, 30) === 0)\n\t\t{\n\t\t\talert(\"You should do a deep dive entry today!\");\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}