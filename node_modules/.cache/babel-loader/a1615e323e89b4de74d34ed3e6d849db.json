{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx\",\n    _class3;\n\nimport * as React from \"react\"; // import {NameReference} from \"./NameReference\";\n\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { MarkupUtils } from \"./MarkupUtils\";\nimport \"./JournalReader.css\";\nexport let JournalReaderMachine = (_class = (_temp = _class2 = class JournalReaderMachine {\n  constructor() {\n    _initializerDefineProperty(this, \"rawText\", _descriptor, this);\n  }\n\n  updateRawText(value) {\n    this.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n  }\n\n  renderJournal() {\n    //eslint-disable-next-line no-useless-escape\n    const pieces = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 10\n      }\n    }, pieces.map(piece => {\n      if (piece === undefined) {\n        return;\n      }\n\n      if (piece.match(MarkupUtils.MARKUP_REGEX)) {\n        return this.getHtmlForMarkup(piece);\n      } else if (piece.match(JournalReaderMachine.DATE_REGEX)) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 8\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }\n        }), piece);\n      } else {\n        return piece;\n      }\n    }));\n  }\n\n  getHtmlForMarkup(markup) {\n    const firstName = MarkupUtils.getFirstNameFromMarkup(markup);\n    const lastName = MarkupUtils.getLastNameFromMarkup(markup);\n    const displayName = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n    if (firstName == null || lastName == null || displayName == null) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"rendered-markup-display-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }\n    }, displayName, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }\n    }, firstName, \"\\xA0\", lastName));\n  }\n\n  replaceMarkupWithDisplayName(rawText) {\n    while (true) {\n      let markup = MarkupUtils.getFullMarkupFromString(rawText);\n\n      if (markup == null) {\n        break;\n      }\n\n      const displayName = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n      if (displayName == null) {\n        console.error(\"Invalid markup was received from getFullMarkupFromString\");\n        return \"TODO\";\n      }\n\n      rawText = rawText.replace(markup, displayName);\n    }\n\n    return rawText;\n  }\n\n}, _class2.DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"rawText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"updateRawText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateRawText\"), _class.prototype)), _class);\nexport let JournalReader = observer(_class3 = class JournalReader extends React.Component {\n  get machine() {\n    return this.props.machine;\n  } //<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.machine.updateRawText(e.currentTarget.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 4\n      }\n    }), this.machine.renderJournal());\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx"],"names":["React","observable","action","observer","MarkupUtils","JournalReaderMachine","updateRawText","value","rawText","renderJournal","pieces","split","map","piece","undefined","match","MARKUP_REGEX","getHtmlForMarkup","DATE_REGEX","markup","firstName","getFirstNameFromMarkup","lastName","getLastNameFromMarkup","displayName","getDisplayNameFromMarkup","replaceMarkupWithDisplayName","getFullMarkupFromString","console","error","replace","JournalReader","Component","machine","props","render","e","currentTarget"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport \"./JournalReader.css\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\tprivate static DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/;\n\n\t@observable public rawText: string = \"\";\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\t//eslint-disable-next-line no-useless-escape\n\t\tconst pieces: string[] = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\n\t\treturn <div>\n\t\t\t{\n\t\t\t\tpieces.map((piece: string) => {\n\t\t\t\t\tif (piece === undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (piece.match(MarkupUtils.MARKUP_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.getHtmlForMarkup(piece);\n\t\t\t\t\t}\n\t\t\t\t\telse if (piece.match(JournalReaderMachine.DATE_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn <>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t{piece}\n\t\t\t\t\t\t</>;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn piece;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t</div>;\n\t}\n\n\tprivate getHtmlForMarkup(markup: string): JSX.Element | null\n\t{\n\t\tconst firstName: string | null = MarkupUtils.getFirstNameFromMarkup(markup);\n\t\tconst lastName: string | null = MarkupUtils.getLastNameFromMarkup(markup);\n\t\tconst displayName: string | null = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n\t\tif (firstName == null || lastName == null || displayName == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\treturn <span className=\"rendered-markup-display-name\">\n\t\t\t{displayName}\n\t\t\t<span className=\"tooltip\">\n\t\t\t\t{firstName}&nbsp;{lastName}\n\t\t\t</span>\n\t\t</span>;\n\t}\n\n\tprivate replaceMarkupWithDisplayName(rawText: string): string\n\t{\n\t\twhile (true)\n\t\t{\n\t\t\tlet markup: string | null = MarkupUtils.getFullMarkupFromString(rawText);\n\t\t\tif (markup == null)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst displayName: string | null = MarkupUtils.getDisplayNameFromMarkup(markup);\n\t\t\tif (displayName == null)\n\t\t\t{\n\t\t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t\t\t\treturn \"TODO\";\n\t\t\t}\n\t\t\trawText = rawText.replace(markup, displayName);\n\t\t}\n\t\treturn rawText;\n\t}\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n//<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\trender()\n\t{\n\t\treturn <div>\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t\n\t\t\t{this.machine.renderJournal()}\n\t\t</div>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}