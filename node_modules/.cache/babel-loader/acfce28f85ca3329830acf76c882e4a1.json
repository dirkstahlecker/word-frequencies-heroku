{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types'); // result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\n\n\nvar Result = function (rowMode, types) {\n  this.command = null;\n  this.rowCount = null;\n  this.oid = null;\n  this.rows = [];\n  this.fields = [];\n  this._parsers = undefined;\n  this._types = types;\n  this.RowCtor = null;\n  this.rowAsArray = rowMode === 'array';\n\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray;\n  }\n};\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/; // adds a command complete message\n\nResult.prototype.addCommandComplete = function (msg) {\n  var match;\n\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text);\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command);\n  }\n\n  if (match) {\n    this.command = match[1];\n\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10);\n      this.rowCount = parseInt(match[3], 10);\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10);\n    }\n  }\n};\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = new Array(rowData.length);\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n\n    if (rawValue !== null) {\n      row[i] = this._parsers[i](rawValue);\n    } else {\n      row[i] = null;\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {};\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    var field = this.fields[i].name;\n\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue);\n    } else {\n      row[field] = null;\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row);\n};\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  this.fields = fieldDescriptions;\n\n  if (this.fields.length) {\n    this._parsers = new Array(fieldDescriptions.length);\n  }\n\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i];\n\n    if (this._types) {\n      this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n    } else {\n      this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n    }\n  }\n};\n\nmodule.exports = Result;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/result.js"],"names":["types","require","Result","rowMode","command","rowCount","oid","rows","fields","_parsers","undefined","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","matchRegexp","prototype","addCommandComplete","msg","match","text","exec","parseInt","rowData","row","Array","length","i","len","rawValue","field","name","addRow","push","addFields","fieldDescriptions","desc","getTypeParser","dataTypeID","format","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode, types) {\n  this.command = null\n  this.rowCount = null\n  this.oid = null\n  this.rows = []\n  this.fields = []\n  this._parsers = undefined\n  this._types = types\n  this.RowCtor = null\n  this.rowAsArray = rowMode === 'array'\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray\n  }\n}\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text)\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command)\n  }\n  if (match) {\n    this.command = match[1]\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10)\n      this.rowCount = parseInt(match[3], 10)\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10)\n    }\n  }\n}\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = new Array(rowData.length)\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    if (rawValue !== null) {\n      row[i] = this._parsers[i](rawValue)\n    } else {\n      row[i] = null\n    }\n  }\n  return row\n}\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {}\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    var field = this.fields[i].name\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue)\n    } else {\n      row[field] = null\n    }\n  }\n  return row\n}\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row)\n}\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  this.fields = fieldDescriptions\n  if (this.fields.length) {\n    this._parsers = new Array(fieldDescriptions.length)\n  }\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i]\n    if (this._types) {\n      this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n    } else {\n      this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n    }\n  }\n}\n\nmodule.exports = Result\n"]},"metadata":{},"sourceType":"script"}