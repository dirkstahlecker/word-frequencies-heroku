{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar utils = require('../utils');\n\nvar NativeQuery = module.exports = function (config, values, callback) {\n  EventEmitter.call(this);\n  config = utils.normalizeQueryConfig(config, values, callback);\n  this.text = config.text;\n  this.values = config.values;\n  this.name = config.name;\n  this.callback = config.callback;\n  this.state = 'new';\n  this._arrayMode = config.rowMode === 'array'; // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n\n  this._emitRowEvents = false;\n  this.on('newListener', function (event) {\n    if (event === 'row') this._emitRowEvents = true;\n  }.bind(this));\n};\n\nutil.inherits(NativeQuery, EventEmitter);\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  'sqlState': 'code',\n  'statementPosition': 'position',\n  'messagePrimary': 'message',\n  'context': 'where',\n  'schemaName': 'schema',\n  'tableName': 'table',\n  'columnName': 'column',\n  'dataTypeName': 'dataType',\n  'constraintName': 'constraint',\n  'sourceFile': 'file',\n  'sourceLine': 'line',\n  'sourceFunction': 'routine'\n};\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields();\n\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key;\n      err[normalizedFieldName] = fields[key];\n    }\n  }\n\n  if (this.callback) {\n    this.callback(err);\n  } else {\n    this.emit('error', err);\n  }\n\n  this.state = 'error';\n};\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure);\n};\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback);\n};\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise;\n  this._promise = new Promise(function (resolve, reject) {\n    this._once('end', resolve);\n\n    this._once('error', reject);\n  }.bind(this));\n  return this._promise;\n};\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running';\n  var self = this;\n  this.native = client.native;\n  client.native.arrayMode = this._arrayMode;\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false;\n    setImmediate(function () {\n      self.emit('_done');\n    }); // handle possible query error\n\n    if (err) {\n      return self.handleError(err);\n    } // emit row events for each row in the result\n\n\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach(row => {\n            self.emit('row', row, results[i]);\n          });\n        });\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results);\n        });\n      }\n    } // handle successful result\n\n\n    self.state = 'end';\n    self.emit('end', results);\n\n    if (self.callback) {\n      self.callback(null, results);\n    }\n  };\n\n  if (process.domain) {\n    after = process.domain.bind(after);\n  } // named query\n\n\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.');\n      console.error('You supplied %s (%s)', this.name, this.name.length);\n      console.error('This can cause conflicts and silent errors executing queries');\n      /* eslint-enable no-console */\n    }\n\n    var values = (this.values || []).map(utils.prepareValue); // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);\n        return after(err);\n      }\n\n      return client.native.execute(this.name, values, after);\n    } // plan the named query the first time, then execute it\n\n\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err);\n      client.namedQueries[self.name] = self.text;\n      return self.native.execute(self.name, values, after);\n    });\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array');\n      return after(err);\n    }\n\n    var vals = this.values.map(utils.prepareValue);\n    client.native.query(this.text, vals, after);\n  } else {\n    client.native.query(this.text, after);\n  }\n};","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/native/query.js"],"names":["EventEmitter","require","util","utils","NativeQuery","module","exports","config","values","callback","call","normalizeQueryConfig","text","name","state","_arrayMode","rowMode","_emitRowEvents","on","event","bind","inherits","errorFieldMap","prototype","handleError","err","fields","native","pq","resultErrorFields","key","normalizedFieldName","emit","then","onSuccess","onFailure","_getPromise","catch","_promise","Promise","resolve","reject","_once","submit","client","self","arrayMode","after","rows","results","setImmediate","length","forEach","rowOfRows","i","row","process","domain","console","error","map","prepareValue","namedQueries","Error","execute","prepare","Array","isArray","vals","query"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('../utils')\n\nvar NativeQuery = module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on('newListener', function (event) {\n    if (event === 'row') this._emitRowEvents = true\n  }.bind(this))\n}\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  'sqlState': 'code',\n  'statementPosition': 'position',\n  'messagePrimary': 'message',\n  'context': 'where',\n  'schemaName': 'schema',\n  'tableName': 'table',\n  'columnName': 'column',\n  'dataTypeName': 'dataType',\n  'constraintName': 'constraint',\n  'sourceFile': 'file',\n  'sourceLine': 'line',\n  'sourceFunction': 'routine'\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(function (resolve, reject) {\n    this._once('end', resolve)\n    this._once('error', reject)\n  }.bind(this))\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach(row => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied %s (%s)', this.name, this.name.length)\n      console.error('This can cause conflicts and silent errors executing queries')\n      /* eslint-enable no-console */\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n        return after(err)\n      }\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = self.text\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}