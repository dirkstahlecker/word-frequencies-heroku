{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _class2,\n    _temp,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx\",\n    _class3;\n\nimport * as React from \"react\"; // import {NameReference} from \"./NameReference\";\n\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { Markup } from \"./stats/Markup\";\nimport \"./JournalReader.css\";\nexport let JournalReaderMachine = (_class = (_temp = _class2 = class JournalReaderMachine {\n  constructor() {\n    _initializerDefineProperty(this, \"rawText\", _descriptor, this);\n  }\n\n  updateRawText(value) {\n    this.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n  }\n\n  renderJournal() {\n    //eslint-disable-next-line no-useless-escape\n    const pieces = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 10\n      }\n    }, pieces.map(piece => {\n      if (piece === undefined) {\n        return \"\";\n      }\n\n      if (piece.match(Markup.MARKUP_REGEX)) {\n        return this.getHtmlForMarkup(piece);\n      } else if (piece.match(JournalReaderMachine.DATE_REGEX)) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 8\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }\n        }), piece);\n      } else {\n        return piece;\n      }\n    }));\n  }\n\n  getHtmlForMarkup(rawMarkup) {\n    const markup = Markup.create(rawMarkup); // const firstName: string | null = MarkupUtils.getFirstNameFromMarkup(markup);\n    // const lastName: string | null = MarkupUtils.getLastNameFromMarkup(markup);\n    // const displayName: string | null = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n    if (markup.firstName == null || markup.lastName == null || markup.displayName == null) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"rendered-markup-display-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }\n    }, markup.displayName, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 4\n      }\n    }, markup.firstName, \"\\xA0\", markup.lastName));\n  }\n\n  replaceMarkupWithDisplayName(rawText) {\n    while (true) {\n      let markup = Markup.create(rawText);\n\n      if (markup == null) {\n        break;\n      }\n\n      const displayName = markup.displayName;\n\n      if (displayName == null) {\n        console.error(\"Invalid markup was received from getFullMarkupFromString\");\n        return \"TODO\";\n      }\n\n      rawText = rawText.replace(markup, displayName);\n    }\n\n    return rawText;\n  }\n\n}, _class2.DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"rawText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"updateRawText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateRawText\"), _class.prototype)), _class);\nexport let JournalReader = observer(_class3 = class JournalReader extends React.Component {\n  get machine() {\n    return this.props.machine;\n  } //<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.machine.updateRawText(e.currentTarget.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 4\n      }\n    }), this.machine.renderJournal());\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx"],"names":["React","observable","action","observer","Markup","JournalReaderMachine","updateRawText","value","rawText","renderJournal","pieces","split","map","piece","undefined","match","MARKUP_REGEX","getHtmlForMarkup","DATE_REGEX","rawMarkup","markup","create","firstName","lastName","displayName","replaceMarkupWithDisplayName","console","error","replace","JournalReader","Component","machine","props","render","e","currentTarget"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\nimport {Markup} from \"./stats/Markup\";\nimport \"./JournalReader.css\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\tprivate static DATE_REGEX = /\\d{1,2}-\\d{1,2}-\\d{1,2}:/;\n\n\t@observable public rawText: string = \"\";\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\t//eslint-disable-next-line no-useless-escape\n\t\tconst pieces: string[] = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])|(\\d{1,2}-\\d{1,2}-\\d{1,2}:)/); //split on markup and dates\n\n\t\treturn <div>\n\t\t\t{\n\t\t\t\tpieces.map((piece: string) => {\n\t\t\t\t\tif (piece === undefined)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif (piece.match(Markup.MARKUP_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.getHtmlForMarkup(piece);\n\t\t\t\t\t}\n\t\t\t\t\telse if (piece.match(JournalReaderMachine.DATE_REGEX))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn <>\n\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t{piece}\n\t\t\t\t\t\t</>;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn piece;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t</div>;\n\t}\n\n\tprivate getHtmlForMarkup(rawMarkup: string): JSX.Element | null\n\t{\n\t\tconst markup: Markup | null = Markup.create(rawMarkup);\n\t\t// const firstName: string | null = MarkupUtils.getFirstNameFromMarkup(markup);\n\t\t// const lastName: string | null = MarkupUtils.getLastNameFromMarkup(markup);\n\t\t// const displayName: string | null = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n\t\tif (markup.firstName == null || markup.lastName == null || markup.displayName == null)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\treturn <span className=\"rendered-markup-display-name\">\n\t\t\t{markup.displayName}\n\t\t\t<span className=\"tooltip\">\n\t\t\t\t{markup.firstName}&nbsp;{markup.lastName}\n\t\t\t</span>\n\t\t</span>;\n\t}\n\n\tprivate replaceMarkupWithDisplayName(rawText: string): string\n\t{\n\t\twhile (true)\n\t\t{\n\t\t\tlet markup: Markup | null = Markup.create(rawText);\n\t\t\tif (markup == null)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst displayName: string | null = markup.displayName;\n\t\t\tif (displayName == null)\n\t\t\t{\n\t\t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t\t\t\treturn \"TODO\";\n\t\t\t}\n\t\t\trawText = rawText.replace(markup, displayName);\n\t\t}\n\t\treturn rawText;\n\t}\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n//<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\trender()\n\t{\n\t\treturn <div>\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\n\t\t\t{this.machine.renderJournal()}\n\t\t</div>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}