{"ast":null,"code":"//stores a markup object\nexport class Markup {\n  //eslint-disable-next-line no-useless-escape\n  static getMarkupPieces(markup) {\n    return Markup.MARKUP_REGEX.exec(markup);\n  }\n\n  static isMarkup(rawString) {\n    return rawString.test(Markup.MARKUP_REGEX);\n  }\n\n  constructor(displayName, firstName, lastName) {\n    this._displayName = void 0;\n    this._firstName = void 0;\n    this._lastName = void 0;\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  static create(rawString) {\n    const pieces = Markup.getMarkupPieces(rawString);\n\n    if (pieces == null || pieces.length !== 4) {\n      return null;\n    }\n\n    const markupClass = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  get firstName() {\n    return this._firstName;\n  }\n\n  get lastName() {\n    return this._lastName;\n  }\n\n  get displayName() {\n    return this._displayName;\n  }\n\n}\nMarkup.MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/Markup.ts"],"names":["Markup","getMarkupPieces","markup","MARKUP_REGEX","exec","isMarkup","rawString","test","constructor","displayName","firstName","lastName","_displayName","_firstName","_lastName","create","pieces","length","markupClass"],"mappings":"AAAA;AACA,OAAO,MAAMA,MAAN,CACP;AACE;AAOA,SAAcC,eAAd,CAA8BC,MAA9B,EACA;AACE,WAAOF,MAAM,CAACG,YAAP,CAAoBC,IAApB,CAAyBF,MAAzB,CAAP;AACD;;AAED,SAAcG,QAAd,CAAuBC,SAAvB,EACA;AACE,WAAOA,SAAS,CAACC,IAAV,CAAeP,MAAM,CAACG,YAAtB,CAAP;AACD;;AAEOK,EAAAA,WAAR,CAAoBC,WAApB,EAAyCC,SAAzC,EAA4DC,QAA5D,EACA;AAAA,SAfQC,YAeR;AAAA,SAdQC,UAcR;AAAA,SAbQC,SAaR;AACE,SAAKD,UAAL,GAAkBH,SAAlB;AACA,SAAKI,SAAL,GAAiBH,QAAjB;AACA,SAAKC,YAAL,GAAoBH,WAApB;AACD;;AAED,SAAcM,MAAd,CAAqBT,SAArB,EACA;AACE,UAAMU,MAA8B,GAAGhB,MAAM,CAACC,eAAP,CAAuBK,SAAvB,CAAvC;;AACA,QAAIU,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACC,MAAP,KAAkB,CAAxC,EACA;AACE,aAAO,IAAP;AACD;;AAED,UAAMC,WAAmB,GAAG,IAAIlB,MAAJ,CAAWgB,MAAM,CAAC,CAAD,CAAjB,EAAsBA,MAAM,CAAC,CAAD,CAA5B,EAAiCA,MAAM,CAAC,CAAD,CAAvC,CAA5B;AACA,WAAOE,WAAP;AACD;;AAED,MAAWR,SAAX,GACA;AACE,WAAO,KAAKG,UAAZ;AACD;;AAED,MAAWF,QAAX,GACA;AACE,WAAO,KAAKG,SAAZ;AACD;;AAED,MAAWL,WAAX,GACA;AACE,WAAO,KAAKG,YAAZ;AACD;;AAlDH;AADaZ,M,CAGEG,Y,GAAe,mC","sourcesContent":["//stores a markup object\nexport class Markup\n{\n  //eslint-disable-next-line no-useless-escape\n\tpublic static MARKUP_REGEX = /\\[!!([^\\|]+)\\|([^_]+)_([^!]+)!!\\]/;\n\n  private _displayName: string;\n  private _firstName: string;\n  private _lastName: string;\n\n  public static getMarkupPieces(markup: string): RegExpExecArray | null\n  {\n    return Markup.MARKUP_REGEX.exec(markup);\n  }\n\n  public static isMarkup(rawString: string): boolean\n  {\n    return rawString.test(Markup.MARKUP_REGEX);  \n  }\n\n  private constructor(displayName: string, firstName: string, lastName: string)\n  {\n    this._firstName = firstName;\n    this._lastName = lastName;\n    this._displayName = displayName;\n  }\n\n  public static create(rawString: string): Markup | null\n  {\n    const pieces: RegExpExecArray | null = Markup.getMarkupPieces(rawString);\n    if (pieces == null || pieces.length !== 4)\n    {\n      return null\n    }\n\n    const markupClass: Markup = new Markup(pieces[1], pieces[2], pieces[3]);\n    return markupClass;\n  }\n\n  public get firstName(): string\n  {\n    return this._firstName;\n  }\n\n  public get lastName(): string\n  {\n    return this._lastName;\n  }\n\n  public get displayName(): string\n  {\n    return this._displayName;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}