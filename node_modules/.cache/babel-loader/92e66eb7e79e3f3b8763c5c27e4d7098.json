{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scopeTab;\n\nvar _tabbable = require(\"./tabbable\");\n\nvar _tabbable2 = _interopRequireDefault(_tabbable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction scopeTab(node, event) {\n  var tabbable = (0, _tabbable2.default)(node);\n\n  if (!tabbable.length) {\n    // Do nothing, since there are no elements that can receive focus.\n    event.preventDefault();\n    return;\n  }\n\n  var shiftKey = event.shiftKey;\n  var head = tabbable[0];\n  var tail = tabbable[tabbable.length - 1]; // proceed with default browser behavior on tab.\n  // Focus on last element on shift + tab.\n\n  if (node === document.activeElement) {\n    if (!shiftKey) return;\n    target = tail;\n  }\n\n  var target;\n\n  if (tail === document.activeElement && !shiftKey) {\n    target = head;\n  }\n\n  if (head === document.activeElement && shiftKey) {\n    target = tail;\n  }\n\n  if (target) {\n    event.preventDefault();\n    target.focus();\n    return;\n  } // Safari radio issue.\n  //\n  // Safari does not move the focus to the radio button,\n  // so we need to force it to really walk through all elements.\n  //\n  // This is very error prone, since we are trying to guess\n  // if it is a safari browser from the first occurence between\n  // chrome or safari.\n  //\n  // The chrome user agent contains the first ocurrence\n  // as the 'chrome/version' and later the 'safari/version'.\n\n\n  var checkSafari = /(\\bChrome\\b|\\bSafari\\b)\\//.exec(navigator.userAgent);\n  var isSafariDesktop = checkSafari != null && checkSafari[1] != \"Chrome\" && /\\biPod\\b|\\biPad\\b/g.exec(navigator.userAgent) == null; // If we are not in safari desktop, let the browser control\n  // the focus\n\n  if (!isSafariDesktop) return;\n  var x = tabbable.indexOf(document.activeElement);\n\n  if (x > -1) {\n    x += shiftKey ? -1 : 1;\n  } // If the tabbable element does not exist,\n  // focus head/tail based on shiftKey\n\n\n  if (typeof tabbable[x] === \"undefined\") {\n    event.preventDefault();\n    target = shiftKey ? tail : head;\n    target.focus();\n    return;\n  }\n\n  event.preventDefault();\n  tabbable[x].focus();\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/react-modal/lib/helpers/scopeTab.js"],"names":["Object","defineProperty","exports","value","default","scopeTab","_tabbable","require","_tabbable2","_interopRequireDefault","obj","__esModule","node","event","tabbable","length","preventDefault","shiftKey","head","tail","document","activeElement","target","focus","checkSafari","exec","navigator","userAgent","isSafariDesktop","x","indexOf","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAD,CAAvC;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,SAASL,QAAT,CAAkBO,IAAlB,EAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,QAAQ,GAAG,CAAC,GAAGN,UAAU,CAACJ,OAAf,EAAwBQ,IAAxB,CAAf;;AAEA,MAAI,CAACE,QAAQ,CAACC,MAAd,EAAsB;AACpB;AACAF,IAAAA,KAAK,CAACG,cAAN;AACA;AACD;;AAED,MAAIC,QAAQ,GAAGJ,KAAK,CAACI,QAArB;AACA,MAAIC,IAAI,GAAGJ,QAAQ,CAAC,CAAD,CAAnB;AACA,MAAIK,IAAI,GAAGL,QAAQ,CAACA,QAAQ,CAACC,MAAT,GAAkB,CAAnB,CAAnB,CAX6B,CAa7B;AACA;;AACA,MAAIH,IAAI,KAAKQ,QAAQ,CAACC,aAAtB,EAAqC;AACnC,QAAI,CAACJ,QAAL,EAAe;AACfK,IAAAA,MAAM,GAAGH,IAAT;AACD;;AAED,MAAIG,MAAJ;;AACA,MAAIH,IAAI,KAAKC,QAAQ,CAACC,aAAlB,IAAmC,CAACJ,QAAxC,EAAkD;AAChDK,IAAAA,MAAM,GAAGJ,IAAT;AACD;;AAED,MAAIA,IAAI,KAAKE,QAAQ,CAACC,aAAlB,IAAmCJ,QAAvC,EAAiD;AAC/CK,IAAAA,MAAM,GAAGH,IAAT;AACD;;AAED,MAAIG,MAAJ,EAAY;AACVT,IAAAA,KAAK,CAACG,cAAN;AACAM,IAAAA,MAAM,CAACC,KAAP;AACA;AACD,GAjC4B,CAmC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,WAAW,GAAG,4BAA4BC,IAA5B,CAAiCC,SAAS,CAACC,SAA3C,CAAlB;AACA,MAAIC,eAAe,GAAGJ,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAAC,CAAD,CAAX,IAAkB,QAAzC,IAAqD,qBAAqBC,IAArB,CAA0BC,SAAS,CAACC,SAApC,KAAkD,IAA7H,CA/C6B,CAiD7B;AACA;;AACA,MAAI,CAACC,eAAL,EAAsB;AAEtB,MAAIC,CAAC,GAAGf,QAAQ,CAACgB,OAAT,CAAiBV,QAAQ,CAACC,aAA1B,CAAR;;AAEA,MAAIQ,CAAC,GAAG,CAAC,CAAT,EAAY;AACVA,IAAAA,CAAC,IAAIZ,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAArB;AACD,GAzD4B,CA2D7B;AACA;;;AACA,MAAI,OAAOH,QAAQ,CAACe,CAAD,CAAf,KAAuB,WAA3B,EAAwC;AACtChB,IAAAA,KAAK,CAACG,cAAN;AACAM,IAAAA,MAAM,GAAGL,QAAQ,GAAGE,IAAH,GAAUD,IAA3B;AACAI,IAAAA,MAAM,CAACC,KAAP;AACA;AACD;;AAEDV,EAAAA,KAAK,CAACG,cAAN;AAEAF,EAAAA,QAAQ,CAACe,CAAD,CAAR,CAAYN,KAAZ;AACD;;AACDQ,MAAM,CAAC7B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scopeTab;\n\nvar _tabbable = require(\"./tabbable\");\n\nvar _tabbable2 = _interopRequireDefault(_tabbable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction scopeTab(node, event) {\n  var tabbable = (0, _tabbable2.default)(node);\n\n  if (!tabbable.length) {\n    // Do nothing, since there are no elements that can receive focus.\n    event.preventDefault();\n    return;\n  }\n\n  var shiftKey = event.shiftKey;\n  var head = tabbable[0];\n  var tail = tabbable[tabbable.length - 1];\n\n  // proceed with default browser behavior on tab.\n  // Focus on last element on shift + tab.\n  if (node === document.activeElement) {\n    if (!shiftKey) return;\n    target = tail;\n  }\n\n  var target;\n  if (tail === document.activeElement && !shiftKey) {\n    target = head;\n  }\n\n  if (head === document.activeElement && shiftKey) {\n    target = tail;\n  }\n\n  if (target) {\n    event.preventDefault();\n    target.focus();\n    return;\n  }\n\n  // Safari radio issue.\n  //\n  // Safari does not move the focus to the radio button,\n  // so we need to force it to really walk through all elements.\n  //\n  // This is very error prone, since we are trying to guess\n  // if it is a safari browser from the first occurence between\n  // chrome or safari.\n  //\n  // The chrome user agent contains the first ocurrence\n  // as the 'chrome/version' and later the 'safari/version'.\n  var checkSafari = /(\\bChrome\\b|\\bSafari\\b)\\//.exec(navigator.userAgent);\n  var isSafariDesktop = checkSafari != null && checkSafari[1] != \"Chrome\" && /\\biPod\\b|\\biPad\\b/g.exec(navigator.userAgent) == null;\n\n  // If we are not in safari desktop, let the browser control\n  // the focus\n  if (!isSafariDesktop) return;\n\n  var x = tabbable.indexOf(document.activeElement);\n\n  if (x > -1) {\n    x += shiftKey ? -1 : 1;\n  }\n\n  // If the tabbable element does not exist,\n  // focus head/tail based on shiftKey\n  if (typeof tabbable[x] === \"undefined\") {\n    event.preventDefault();\n    target = shiftKey ? tail : head;\n    target.focus();\n    return;\n  }\n\n  event.preventDefault();\n\n  tabbable[x].focus();\n}\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}