{"ast":null,"code":"'use strict';\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse();\n};\n\nclass ArrayParser {\n  constructor(source, transform) {\n    this.source = source;\n    this.transform = transform || identity;\n    this.position = 0;\n    this.entries = [];\n    this.recorded = [];\n    this.dimension = 0;\n  }\n\n  isEof() {\n    return this.position >= this.source.length;\n  }\n\n  nextCharacter() {\n    var character = this.source[this.position++];\n\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      };\n    }\n\n    return {\n      value: character,\n      escaped: false\n    };\n  }\n\n  record(character) {\n    this.recorded.push(character);\n  }\n\n  newEntry(includeEmpty) {\n    var entry;\n\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('');\n\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null;\n      }\n\n      if (entry !== null) entry = this.transform(entry);\n      this.entries.push(entry);\n      this.recorded = [];\n    }\n  }\n\n  consumeDimensions() {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter();\n        if (char.value === '=') break;\n      }\n    }\n  }\n\n  parse(nested) {\n    var character, parser, quote;\n    this.consumeDimensions();\n\n    while (!this.isEof()) {\n      character = this.nextCharacter();\n\n      if (character.value === '{' && !quote) {\n        this.dimension++;\n\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform);\n          this.entries.push(parser.parse(true));\n          this.position += parser.position - 2;\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--;\n\n        if (!this.dimension) {\n          this.newEntry();\n          if (nested) return this.entries;\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true);\n        quote = !quote;\n      } else if (character.value === ',' && !quote) {\n        this.newEntry();\n      } else {\n        this.record(character.value);\n      }\n    }\n\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced');\n    }\n\n    return this.entries;\n  }\n\n}\n\nfunction identity(value) {\n  return value;\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/postgres-array/index.js"],"names":["exports","parse","source","transform","ArrayParser","constructor","identity","position","entries","recorded","dimension","isEof","length","nextCharacter","character","value","escaped","record","push","newEntry","includeEmpty","entry","join","consumeDimensions","char","nested","parser","quote","substr","Error"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nclass ArrayParser {\n  constructor (source, transform) {\n    this.source = source\n    this.transform = transform || identity\n    this.position = 0\n    this.entries = []\n    this.recorded = []\n    this.dimension = 0\n  }\n\n  isEof () {\n    return this.position >= this.source.length\n  }\n\n  nextCharacter () {\n    var character = this.source[this.position++]\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      }\n    }\n    return {\n      value: character,\n      escaped: false\n    }\n  }\n\n  record (character) {\n    this.recorded.push(character)\n  }\n\n  newEntry (includeEmpty) {\n    var entry\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('')\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n      if (entry !== null) entry = this.transform(entry)\n      this.entries.push(entry)\n      this.recorded = []\n    }\n  }\n\n  consumeDimensions () {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter()\n        if (char.value === '=') break\n      }\n    }\n  }\n\n  parse (nested) {\n    var character, parser, quote\n    this.consumeDimensions()\n    while (!this.isEof()) {\n      character = this.nextCharacter()\n      if (character.value === '{' && !quote) {\n        this.dimension++\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n          this.entries.push(parser.parse(true))\n          this.position += parser.position - 2\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--\n        if (!this.dimension) {\n          this.newEntry()\n          if (nested) return this.entries\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true)\n        quote = !quote\n      } else if (character.value === ',' && !quote) {\n        this.newEntry()\n      } else {\n        this.record(character.value)\n      }\n    }\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced')\n    }\n    return this.entries\n  }\n}\n\nfunction identity (value) {\n  return value\n}\n"]},"metadata":{},"sourceType":"script"}