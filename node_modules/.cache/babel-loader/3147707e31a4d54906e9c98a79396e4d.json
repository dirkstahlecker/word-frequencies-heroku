{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar util = require('util');\n\nvar Client = require('./client');\n\nvar defaults = require('./defaults');\n\nvar Connection = require('./connection');\n\nvar Pool = require('pg-pool');\n\nconst checkConstructor = require('./compat/check-constructor');\n\nconst poolFactory = Client => {\n  var BoundPool = function (options) {\n    // eslint-disable-next-line no-eval\n    checkConstructor('pg.Pool', 'PG-POOL-NEW', () => eval('new.target'));\n    var config = Object.assign({\n      Client: Client\n    }, options);\n    return new Pool(config);\n  };\n\n  util.inherits(BoundPool, Pool);\n  return BoundPool;\n};\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults;\n  this.Client = clientConstructor;\n  this.Query = this.Client.Query;\n  this.Pool = poolFactory(this.Client);\n  this._pools = [];\n  this.Connection = Connection;\n  this.types = require('pg-types');\n};\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'));\n} else {\n  module.exports = new PG(Client); // lazy require native module...the native module may not have installed\n\n  module.exports.__defineGetter__('native', function () {\n    delete module.exports.native;\n    var native = null;\n\n    try {\n      native = new PG(require('./native'));\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err;\n      }\n      /* eslint-disable no-console */\n\n\n      console.error(err.message);\n      /* eslint-enable no-console */\n    }\n\n    module.exports.native = native;\n    return native;\n  });\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/index.js"],"names":["util","require","Client","defaults","Connection","Pool","checkConstructor","poolFactory","BoundPool","options","eval","config","Object","assign","inherits","PG","clientConstructor","Query","_pools","types","process","env","NODE_PG_FORCE_NATIVE","module","exports","__defineGetter__","native","err","code","console","error","message"],"mappings":"AAAA;AACA;;;;;;;;AAQA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,SAAD,CAAlB;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,4BAAD,CAAhC;;AAEA,MAAMM,WAAW,GAAIL,MAAD,IAAY;AAC9B,MAAIM,SAAS,GAAG,UAAUC,OAAV,EAAmB;AACjC;AACAH,IAAAA,gBAAgB,CAAC,SAAD,EAAY,aAAZ,EAA2B,MAAMI,IAAI,CAAC,YAAD,CAArC,CAAhB;AAEA,QAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEX,MAAAA,MAAM,EAAEA;AAAV,KAAd,EAAkCO,OAAlC,CAAb;AACA,WAAO,IAAIJ,IAAJ,CAASM,MAAT,CAAP;AACD,GAND;;AAQAX,EAAAA,IAAI,CAACc,QAAL,CAAcN,SAAd,EAAyBH,IAAzB;AAEA,SAAOG,SAAP;AACD,CAZD;;AAcA,IAAIO,EAAE,GAAG,UAAUC,iBAAV,EAA6B;AACpC,OAAKb,QAAL,GAAgBA,QAAhB;AACA,OAAKD,MAAL,GAAcc,iBAAd;AACA,OAAKC,KAAL,GAAa,KAAKf,MAAL,CAAYe,KAAzB;AACA,OAAKZ,IAAL,GAAYE,WAAW,CAAC,KAAKL,MAAN,CAAvB;AACA,OAAKgB,MAAL,GAAc,EAAd;AACA,OAAKd,UAAL,GAAkBA,UAAlB;AACA,OAAKe,KAAL,GAAalB,OAAO,CAAC,UAAD,CAApB;AACD,CARD;;AAUA,IAAI,OAAOmB,OAAO,CAACC,GAAR,CAAYC,oBAAnB,KAA4C,WAAhD,EAA6D;AAC3DC,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,EAAJ,CAAOd,OAAO,CAAC,UAAD,CAAd,CAAjB;AACD,CAFD,MAEO;AACLsB,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,EAAJ,CAAOb,MAAP,CAAjB,CADK,CAGL;;AACAqB,EAAAA,MAAM,CAACC,OAAP,CAAeC,gBAAf,CAAgC,QAAhC,EAA0C,YAAY;AACpD,WAAOF,MAAM,CAACC,OAAP,CAAeE,MAAtB;AACA,QAAIA,MAAM,GAAG,IAAb;;AACA,QAAI;AACFA,MAAAA,MAAM,GAAG,IAAIX,EAAJ,CAAOd,OAAO,CAAC,UAAD,CAAd,CAAT;AACD,KAFD,CAEE,OAAO0B,GAAP,EAAY;AACZ,UAAIA,GAAG,CAACC,IAAJ,KAAa,kBAAjB,EAAqC;AACnC,cAAMD,GAAN;AACD;AACD;;;AACAE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAG,CAACI,OAAlB;AACA;AACD;;AACDR,IAAAA,MAAM,CAACC,OAAP,CAAeE,MAAf,GAAwBA,MAAxB;AACA,WAAOA,MAAP;AACD,GAfD;AAgBD","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar util = require('util')\nvar Client = require('./client')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nvar Pool = require('pg-pool')\nconst checkConstructor = require('./compat/check-constructor')\n\nconst poolFactory = (Client) => {\n  var BoundPool = function (options) {\n    // eslint-disable-next-line no-eval\n    checkConstructor('pg.Pool', 'PG-POOL-NEW', () => eval('new.target'))\n\n    var config = Object.assign({ Client: Client }, options)\n    return new Pool(config)\n  }\n\n  util.inherits(BoundPool, Pool)\n\n  return BoundPool\n}\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  module.exports.__defineGetter__('native', function () {\n    delete module.exports.native\n    var native = null\n    try {\n      native = new PG(require('./native'))\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err\n      }\n      /* eslint-disable no-console */\n      console.error(err.message)\n      /* eslint-enable no-console */\n    }\n    module.exports.native = native\n    return native\n  })\n}\n"]},"metadata":{},"sourceType":"script"}