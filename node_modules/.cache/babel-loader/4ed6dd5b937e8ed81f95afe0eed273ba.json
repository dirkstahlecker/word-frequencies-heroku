{"ast":null,"code":"//filter will reemit the data if cb(err,pass) pass is truthy\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\nvar through = require('through');\n\nvar Decoder = require('string_decoder').StringDecoder;\n\nmodule.exports = split; //TODO pass in a function to map across the lines.\n\nfunction split(matcher, mapper, options) {\n  var decoder = new Decoder();\n  var soFar = '';\n  var maxLength = options && options.maxLength;\n  var trailing = options && options.trailing === false ? false : true;\n  if ('function' === typeof matcher) mapper = matcher, matcher = null;\n  if (!matcher) matcher = /\\r?\\n/;\n\n  function emit(stream, piece) {\n    if (mapper) {\n      try {\n        piece = mapper(piece);\n      } catch (err) {\n        return stream.emit('error', err);\n      }\n\n      if ('undefined' !== typeof piece) stream.queue(piece);\n    } else stream.queue(piece);\n  }\n\n  function next(stream, buffer) {\n    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher);\n    soFar = pieces.pop();\n    if (maxLength && soFar.length > maxLength) return stream.emit('error', new Error('maximum buffer reached'));\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i];\n      emit(stream, piece);\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b));\n  }, function () {\n    if (decoder.end) next(this, decoder.end());\n    if (trailing && soFar != null) emit(this, soFar);\n    this.queue(null);\n  });\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/split/index.js"],"names":["through","require","Decoder","StringDecoder","module","exports","split","matcher","mapper","options","decoder","soFar","maxLength","trailing","emit","stream","piece","err","queue","next","buffer","pieces","pop","length","Error","i","b","write","end"],"mappings":"AAAA;AAEA;AACA;AACA;AAGA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAP,CAA0BE,aAAxC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,KAAjB,C,CAEA;;AAEA,SAASA,KAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AACxC,MAAIC,OAAO,GAAG,IAAIR,OAAJ,EAAd;AACA,MAAIS,KAAK,GAAG,EAAZ;AACA,MAAIC,SAAS,GAAGH,OAAO,IAAIA,OAAO,CAACG,SAAnC;AACA,MAAIC,QAAQ,GAAGJ,OAAO,IAAIA,OAAO,CAACI,QAAR,KAAqB,KAAhC,GAAwC,KAAxC,GAAgD,IAA/D;AACA,MAAG,eAAe,OAAON,OAAzB,EACEC,MAAM,GAAGD,OAAT,EAAkBA,OAAO,GAAG,IAA5B;AACF,MAAI,CAACA,OAAL,EACEA,OAAO,GAAG,OAAV;;AAEF,WAASO,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6B;AAC3B,QAAGR,MAAH,EAAW;AACT,UAAI;AACFQ,QAAAA,KAAK,GAAGR,MAAM,CAACQ,KAAD,CAAd;AACD,OAFD,CAGA,OAAOC,GAAP,EAAY;AACV,eAAOF,MAAM,CAACD,IAAP,CAAY,OAAZ,EAAqBG,GAArB,CAAP;AACD;;AACD,UAAG,gBAAgB,OAAOD,KAA1B,EACED,MAAM,CAACG,KAAP,CAAaF,KAAb;AACH,KATD,MAWED,MAAM,CAACG,KAAP,CAAaF,KAAb;AACH;;AAED,WAASG,IAAT,CAAeJ,MAAf,EAAuBK,MAAvB,EAA+B;AAC7B,QAAIC,MAAM,GAAG,CAAC,CAACV,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,EAAzB,IAA+BS,MAAhC,EAAwCd,KAAxC,CAA8CC,OAA9C,CAAb;AACAI,IAAAA,KAAK,GAAGU,MAAM,CAACC,GAAP,EAAR;AAEA,QAAIV,SAAS,IAAID,KAAK,CAACY,MAAN,GAAeX,SAAhC,EACE,OAAOG,MAAM,CAACD,IAAP,CAAY,OAAZ,EAAqB,IAAIU,KAAJ,CAAU,wBAAV,CAArB,CAAP;;AAEF,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACE,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;AACtC,UAAIT,KAAK,GAAGK,MAAM,CAACI,CAAD,CAAlB;AACAX,MAAAA,IAAI,CAACC,MAAD,EAASC,KAAT,CAAJ;AACD;AACF;;AAED,SAAOhB,OAAO,CAAC,UAAU0B,CAAV,EAAa;AAC1BP,IAAAA,IAAI,CAAC,IAAD,EAAOT,OAAO,CAACiB,KAAR,CAAcD,CAAd,CAAP,CAAJ;AACD,GAFa,EAGd,YAAY;AACV,QAAGhB,OAAO,CAACkB,GAAX,EACET,IAAI,CAAC,IAAD,EAAOT,OAAO,CAACkB,GAAR,EAAP,CAAJ;AACF,QAAGf,QAAQ,IAAIF,KAAK,IAAI,IAAxB,EACEG,IAAI,CAAC,IAAD,EAAOH,KAAP,CAAJ;AACF,SAAKO,KAAL,CAAW,IAAX;AACD,GATa,CAAd;AAUD","sourcesContent":["//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar through = require('through')\nvar Decoder = require('string_decoder').StringDecoder\n\nmodule.exports = split\n\n//TODO pass in a function to map across the lines.\n\nfunction split (matcher, mapper, options) {\n  var decoder = new Decoder()\n  var soFar = ''\n  var maxLength = options && options.maxLength;\n  var trailing = options && options.trailing === false ? false : true\n  if('function' === typeof matcher)\n    mapper = matcher, matcher = null\n  if (!matcher)\n    matcher = /\\r?\\n/\n\n  function emit(stream, piece) {\n    if(mapper) {\n      try {\n        piece = mapper(piece)\n      }\n      catch (err) {\n        return stream.emit('error', err)\n      }\n      if('undefined' !== typeof piece)\n        stream.queue(piece)\n    }\n    else\n      stream.queue(piece)\n  }\n\n  function next (stream, buffer) {\n    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher)\n    soFar = pieces.pop()\n\n    if (maxLength && soFar.length > maxLength)\n      return stream.emit('error', new Error('maximum buffer reached'))\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i]\n      emit(stream, piece)\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b))\n  },\n  function () {\n    if(decoder.end)\n      next(this, decoder.end())\n    if(trailing && soFar != null)\n      emit(this, soFar)\n    this.queue(null)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}