{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types');\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types;\n  this.text = {};\n  this.binary = {};\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text':\n      return this.text;\n\n    case 'binary':\n      return this.binary;\n\n    default:\n      return {};\n  }\n};\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n\n  this.getOverrides(format)[oid] = parseFn;\n};\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text';\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format);\n};\n\nmodule.exports = TypeOverrides;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/type-overrides.js"],"names":["types","require","TypeOverrides","userTypes","_types","text","binary","prototype","getOverrides","format","setTypeParser","oid","parseFn","getTypeParser","module","exports"],"mappings":"AAAA;AACA;;;;;;;;AAQA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AAEA,SAASC,aAAT,CAAwBC,SAAxB,EAAmC;AACjC,OAAKC,MAAL,GAAcD,SAAS,IAAIH,KAA3B;AACA,OAAKK,IAAL,GAAY,EAAZ;AACA,OAAKC,MAAL,GAAc,EAAd;AACD;;AAEDJ,aAAa,CAACK,SAAd,CAAwBC,YAAxB,GAAuC,UAAUC,MAAV,EAAkB;AACvD,UAAQA,MAAR;AACE,SAAK,MAAL;AAAa,aAAO,KAAKJ,IAAZ;;AACb,SAAK,QAAL;AAAe,aAAO,KAAKC,MAAZ;;AACf;AAAS,aAAO,EAAP;AAHX;AAKD,CAND;;AAQAJ,aAAa,CAACK,SAAd,CAAwBG,aAAxB,GAAwC,UAAUC,GAAV,EAAeF,MAAf,EAAuBG,OAAvB,EAAgC;AACtE,MAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;AAChCG,IAAAA,OAAO,GAAGH,MAAV;AACAA,IAAAA,MAAM,GAAG,MAAT;AACD;;AACD,OAAKD,YAAL,CAAkBC,MAAlB,EAA0BE,GAA1B,IAAiCC,OAAjC;AACD,CAND;;AAQAV,aAAa,CAACK,SAAd,CAAwBM,aAAxB,GAAwC,UAAUF,GAAV,EAAeF,MAAf,EAAuB;AAC7DA,EAAAA,MAAM,GAAGA,MAAM,IAAI,MAAnB;AACA,SAAO,KAAKD,YAAL,CAAkBC,MAAlB,EAA0BE,GAA1B,KAAkC,KAAKP,MAAL,CAAYS,aAAZ,CAA0BF,GAA1B,EAA+BF,MAA/B,CAAzC;AACD,CAHD;;AAKAK,MAAM,CAACC,OAAP,GAAiBb,aAAjB","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\n\nfunction TypeOverrides (userTypes) {\n  this._types = userTypes || types\n  this.text = {}\n  this.binary = {}\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text': return this.text\n    case 'binary': return this.binary\n    default: return {}\n  }\n}\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format\n    format = 'text'\n  }\n  this.getOverrides(format)[oid] = parseFn\n}\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text'\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format)\n}\n\nmodule.exports = TypeOverrides\n"]},"metadata":{},"sourceType":"script"}