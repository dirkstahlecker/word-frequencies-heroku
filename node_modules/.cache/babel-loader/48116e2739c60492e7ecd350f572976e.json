{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/GraphPlace.tsx\";\n\nimport * as React from \"react\";\nimport { observer } from \"mobx-react\";\nexport class GraphPlaceMachine {}\nexport let GraphPlace = observer(_class = (_temp = class GraphPlace extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.ref = void 0;\n  }\n\n  doThing() {\n    // set the dimensions and margins of the graph\n    let margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom; // set the ranges\n\n    var x = d3.scaleBand().range([0, width]).padding(0.1);\n    var y = d3.scaleLinear().range([height, 0]); // append the svg object to the body of the page\n    // append a 'group' element to 'svg'\n    // moves the 'group' element to the top left margin\n\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // get the data\n\n    d3.csv(\"sales.csv\", function (error, data) {\n      if (error) throw error; // format the data\n\n      data.forEach(function (d) {\n        d.sales = +d.sales;\n      }); // Scale the range of the data in the domains\n\n      x.domain(data.map(function (d) {\n        return d.salesperson;\n      }));\n      y.domain([0, d3.max(data, function (d) {\n        return d.sales;\n      })]); // append the rectangles for the bar chart\n\n      svg.selectAll(\".bar\").data(data).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", function (d) {\n        return x(d.salesperson);\n      }).attr(\"width\", x.bandwidth()).attr(\"y\", function (d) {\n        return y(d.sales);\n      }).attr(\"height\", function (d) {\n        return height - y(d.sales);\n      }); // add the x Axis\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // add the y Axis\n\n      svg.append(\"g\").call(d3.axisLeft(y));\n    });\n  }\n\n  componentDidMount() {\n    d3.select(this.ref).append(\"circle\").attr(\"r\", 5).attr(\"cx\", this.props.width / 2).attr(\"cy\", this.props.height / 2).attr(\"fill\", \"red\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"container\",\n      ref: ref => this.ref = ref,\n      width: this.props.width,\n      height: this.props.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    });\n  }\n\n}, _temp)) || _class;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/GraphPlace.tsx"],"names":["React","observer","GraphPlaceMachine","GraphPlace","Component","ref","doThing","margin","top","right","bottom","left","width","height","x","d3","scaleBand","range","padding","y","scaleLinear","svg","select","append","attr","csv","error","data","forEach","d","sales","domain","map","salesperson","max","selectAll","enter","bandwidth","call","axisBottom","axisLeft","componentDidMount","props","render"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {observable, runInAction, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nexport interface GraphPlaceProps\n{\n  // machine: GraphPlaceMachine;\n}\n\nexport class GraphPlaceMachine\n{\n\n}\n\ntype d3Node = {\n  id: string,\n  group: number\n};\n\ntype d3Link = {\n  source: string,\n  target: string,\n  value: number\n};\n\ntype Graph = {\n  nodes: d3Node[],\n  links: d3Link[]\n};\n\n@observer\nexport class GraphPlace extends React.Component<GraphPlaceProps>\n{\n  private doThing(): void\n  {\n    // set the dimensions and margins of the graph\n    let margin = {top: 20, right: 20, bottom: 30, left: 40},\n        width = 960 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n    // set the ranges\n    var x = d3.scaleBand()\n              .range([0, width])\n              .padding(0.1);\n    var y = d3.scaleLinear()\n              .range([height, 0]);\n\n    // append the svg object to the body of the page\n    // append a 'group' element to 'svg'\n    // moves the 'group' element to the top left margin\n    var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // get the data\n    d3.csv(\"sales.csv\", function(error, data) {\n      if (error) throw error;\n\n      // format the data\n      data.forEach(function(d) {\n        d.sales = +d.sales;\n      });\n\n      // Scale the range of the data in the domains\n      x.domain(data.map(function(d) { return d.salesperson; }));\n      y.domain([0, d3.max(data, function(d) { return d.sales; })]);\n\n      // append the rectangles for the bar chart\n      svg.selectAll(\".bar\")\n          .data(data)\n        .enter().append(\"rect\")\n          .attr(\"class\", \"bar\")\n          .attr(\"x\", function(d) { return x(d.salesperson); })\n          .attr(\"width\", x.bandwidth())\n          .attr(\"y\", function(d) { return y(d.sales); })\n          .attr(\"height\", function(d) { return height - y(d.sales); });\n\n      // add the x Axis\n      svg.append(\"g\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n      // add the y Axis\n      svg.append(\"g\")\n          .call(d3.axisLeft(y));\n\n    });\n  }\n\n  private ref: SVGSVGElement;\n\n  componentDidMount()\n  {\n    d3.select(this.ref)\n    .append(\"circle\")\n    .attr(\"r\", 5)\n    .attr(\"cx\", this.props.width / 2)\n    .attr(\"cy\", this.props.height / 2)\n    .attr(\"fill\", \"red\");\n  }\n\n  render() {\n    return (\n      <svg className=\"container\" ref={(ref: SVGSVGElement) => this.ref = ref}\n        width={this.props.width} height={this.props.height}>\n      </svg>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}