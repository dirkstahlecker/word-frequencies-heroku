{"ast":null,"code":"import { Markup } from \"./Markup\"; // export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo {\n  constructor(word, count, date) {\n    this._word = void 0;\n    this._count = void 0;\n    this._dates = new Set();\n    this._word = word;\n    this._count = count;\n\n    if (date !== undefined) {\n      this.addDate(date);\n    }\n  }\n\n  get word() {\n    return this._word;\n  }\n\n  set word(value) {\n    this._word = value;\n  }\n\n  get count() {\n    return this._count;\n  }\n\n  set count(value) {\n    this._count = value;\n  }\n\n  get dates() {\n    return this._dates;\n  }\n\n  addDate(date) {\n    this._dates.add(date);\n  }\n\n  clearDates() {\n    this._dates.clear();\n  }\n\n  getSortedDates() {\n    const sortedArray = Array.from(this._dates).sort();\n    return sortedArray;\n  }\n\n  getFirstDate() {\n    return this.getSortedDates()[0];\n  }\n\n  getLastDate() {\n    return this.getSortedDates()[getSortedDates.size];\n  }\n\n}\nexport class NameInfo extends WordInfo {\n  constructor(word, count, date) {\n    if (!Markup.isMarkup(word)) {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n\n    super(word, count, date);\n  }\n\n  set word(value) {\n    if (!Markup.isMarkup(value)) {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n\n    this._word = value;\n  }\n\n  get word() {\n    //we know it's markup since it's checked in the setter\n    return Markup.create(this._word).displayName;\n  }\n\n  get markup() {\n    return Markup.create(this._word);\n  }\n\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/NamesDB.ts"],"names":["Markup","WordInfo","constructor","word","count","date","_word","_count","_dates","Set","undefined","addDate","value","dates","add","clearDates","clear","getSortedDates","sortedArray","Array","from","sort","getFirstDate","getLastDate","size","NameInfo","isMarkup","Error","create","displayName","markup"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,UAArB,C,CAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAN,CACP;AAKEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,KAAf,EAA8BC,IAA9B,EACX;AAAA,SALUC,KAKV;AAAA,SAJUC,MAIV;AAAA,SAHUC,MAGV,GAH8B,IAAIC,GAAJ,EAG9B;AACE,SAAKH,KAAL,GAAaH,IAAb;AACA,SAAKI,MAAL,GAAcH,KAAd;;AACA,QAAIC,IAAI,KAAKK,SAAb,EACA;AACE,WAAKC,OAAL,CAAaN,IAAb;AACD;AACF;;AAED,MAAWF,IAAX,GACA;AACE,WAAO,KAAKG,KAAZ;AACD;;AAED,MAAWH,IAAX,CAAgBS,KAAhB,EACA;AACE,SAAKN,KAAL,GAAaM,KAAb;AACD;;AAED,MAAWR,KAAX,GACA;AACE,WAAO,KAAKG,MAAZ;AACD;;AAED,MAAWH,KAAX,CAAiBQ,KAAjB,EACA;AACE,SAAKL,MAAL,GAAcK,KAAd;AACD;;AAED,MAAWC,KAAX,GACA;AACE,WAAO,KAAKL,MAAZ;AACD;;AAEMG,EAAAA,OAAP,CAAeN,IAAf,EACA;AACE,SAAKG,MAAL,CAAYM,GAAZ,CAAgBT,IAAhB;AACD;;AAEMU,EAAAA,UAAP,GACA;AACE,SAAKP,MAAL,CAAYQ,KAAZ;AACD;;AAEOC,EAAAA,cAAR,GACA;AACE,UAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKZ,MAAhB,EAAwBa,IAAxB,EAApB;AACA,WAAOH,WAAP;AACD;;AAEMI,EAAAA,YAAP,GACA;AACE,WAAO,KAAKL,cAAL,GAAsB,CAAtB,CAAP;AACD;;AAEMM,EAAAA,WAAP,GACA;AACE,WAAO,KAAKN,cAAL,GAAsBA,cAAc,CAACO,IAArC,CAAP;AACD;;AAhEH;AAmEA,OAAO,MAAMC,QAAN,SAAuBxB,QAAvB,CACP;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAeC,KAAf,EAA8BC,IAA9B,EACX;AACE,QAAI,CAACL,MAAM,CAAC0B,QAAP,CAAgBvB,IAAhB,CAAL,EACA;AACE,YAAMwB,KAAK,CAAC,uCAAD,CAAX;AACD;;AACD,UAAMxB,IAAN,EAAYC,KAAZ,EAAmBC,IAAnB;AACD;;AAED,MAAWF,IAAX,CAAgBS,KAAhB,EACA;AACE,QAAI,CAACZ,MAAM,CAAC0B,QAAP,CAAgBd,KAAhB,CAAL,EACA;AACE,YAAMe,KAAK,CAAC,uCAAD,CAAX;AACD;;AACD,SAAKrB,KAAL,GAAaM,KAAb;AACD;;AAED,MAAWT,IAAX,GACA;AACE;AACA,WAAOH,MAAM,CAAC4B,MAAP,CAAc,KAAKtB,KAAnB,EAA0BuB,WAAjC;AACD;;AAED,MAAWC,MAAX,GACA;AACE,WAAO9B,MAAM,CAAC4B,MAAP,CAAc,KAAKtB,KAAnB,CAAP;AACD;;AA5BH","sourcesContent":["import {Markup} from \"./Markup\";\n\n// export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo\n{\n  protected _word: string;\n  protected _count: number;\n  protected _dates: Set<Date> = new Set();\n\n  constructor(word: string, count: number, date?: Date)\n  {\n    this._word = word;\n    this._count = count;\n    if (date !== undefined)\n    {\n      this.addDate(date);\n    }\n  }\n\n  public get word(): string\n  {\n    return this._word;\n  }\n\n  public set word(value: string)\n  {\n    this._word = value;\n  }\n\n  public get count(): number\n  {\n    return this._count;\n  }\n\n  public set count(value: number)\n  {\n    this._count = value;\n  }\n\n  public get dates(): Set<Date>\n  {\n    return this._dates;\n  }\n\n  public addDate(date: Date): void\n  {\n    this._dates.add(date);\n  }\n\n  public clearDates(): void\n  {\n    this._dates.clear();\n  }\n\n  private getSortedDates(): Date[]\n  {\n    const sortedArray = Array.from(this._dates).sort();\n    return sortedArray;\n  }\n\n  public getFirstDate(): Date\n  {\n    return this.getSortedDates()[0];\n  }\n\n  public getLastDate(): Date\n  {\n    return this.getSortedDates()[getSortedDates.size];\n  }\n}\n\nexport class NameInfo extends WordInfo\n{\n  constructor(word: string, count: number, date?: Date)\n  {\n    if (!Markup.isMarkup(word))\n    {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n    super(word, count, date);\n  }\n\n  public set word(value: string)\n  {\n    if (!Markup.isMarkup(value))\n    {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n    this._word = value;\n  }\n\n  public get word(): string\n  {\n    //we know it's markup since it's checked in the setter\n    return Markup.create(this._word).displayName;\n  }\n\n  public get markup(): Markup\n  {\n    return Markup.create(this._word)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}