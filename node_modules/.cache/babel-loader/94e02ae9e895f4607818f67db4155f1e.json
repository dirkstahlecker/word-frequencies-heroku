{"ast":null,"code":"import _possibleConstructorReturn from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/inherits\";import _regeneratorRuntime from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _initializerDefineProperty from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";import _classCallCheck from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/createClass\";import _applyDecoratedDescriptor from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";import _initializerWarningHelper from\"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";var _dec,_class,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_temp,_class3;import*as React from\"react\";import{observable,action}from\"mobx\";import{observer}from\"mobx-react\";import{NameReference}from\"./NameReference\";import{NamePickerModal,NamePickerModalMachine}from\"./NamePickerModal\";import{MarkupUtils}from\"./MarkupUtils\";// import ReactModal from \"react-modal\";\nexport var AddMarkupMachine=(_dec=action.bound,(_class=(_temp=/*#__PURE__*/function(){function AddMarkupMachine(){var _this=this;_classCallCheck(this,AddMarkupMachine);this.namePickerModalMachine=new NamePickerModalMachine();_initializerDefineProperty(this,\"modalResponse\",_descriptor,this);_initializerDefineProperty(this,\"currentName\",_descriptor2,this);_initializerDefineProperty(this,\"oldEntryText\",_descriptor3,this);_initializerDefineProperty(this,\"updateOldEntryText\",_descriptor4,this);this.checkerFunction=function(){if(_this.namePickerModalMachine.submitClicked){}return false;};_initializerDefineProperty(this,\"handleModalCloseRequest\",_descriptor5,this);}_createClass(AddMarkupMachine,[{key:\"stripWord\",value:function stripWord(inp){var outputStr=\"\";for(var i=0;i<inp.length;i++){var c=inp[i];if(AddMarkupMachine.wordSplitCharacters.indexOf(c)>-1){continue;}outputStr+=c;}return outputStr;}},{key:\"startNameSearch\",value:function(){var _startNameSearch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this2=this;var outputText_in,outputText,currentWord,i,c,word,modalPromise,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:outputText_in=_args.length>0&&_args[0]!==undefined?_args[0]:\"\";// let words: string[] = this.oldEntryText.split(/\\s|\\.|,|:/);\n// console.log(words);\noutputText=outputText_in;currentWord=\"\";i=0;case 4:if(!(i<this.oldEntryText.length)){_context.next=25;break;}c=this.oldEntryText[i];if(!(AddMarkupMachine.wordSplitCharacters.indexOf(c)>-1)){_context.next=21;break;}//check if it's a name\nword=this.stripWord(currentWord);if(!NameReference.isName(word)){_context.next=17;break;}//show modal\nthis.modalResponse=null;this.currentName=word;//shows modal\nmodalPromise=new Promise(function(res){return setTimeout(_this2.checkerFunction,100);});// const modalPromise = new Promise((resolve, reject) => this.modalResponse != null)\n// await modalPromise;\n// this.promiseModal().then(() => console.log(\"After modal\"));\noutputText+=this.modalResponse;console.log(outputText);// return this.startNameSearch(outputText);\nreturn _context.abrupt(\"return\",modalPromise);case 17:outputText+=currentWord;case 18:currentWord=\"\";_context.next=22;break;case 21:currentWord+=c;case 22:i++;_context.next=4;break;case 25:case\"end\":return _context.stop();}}},_callee,this);}));function startNameSearch(){return _startNameSearch.apply(this,arguments);}return startNameSearch;}()// private promiseModal(): Promise<boolean>\n// {\n//   return new Promise((resolve, reject) => {\n//     <Modal \n//       isOpen={true}\n//       onRequestClose={() => resolve(true)}\n//       contentLabel=\"Example Modal\"\n//     >\n//       TEST\n//     </Modal>\n//   });\n// }\n}],[{key:\"wordSplitCharacters\",get:function get(){return[\".\",\",\",\"!\",\" \",\"?\",\":\",\";\",\"\\n\",\"'\"];}}]);return AddMarkupMachine;}(),_temp),(_descriptor=_applyDecoratedDescriptor(_class.prototype,\"modalResponse\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return null;}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,\"currentName\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return null;}}),_descriptor3=_applyDecoratedDescriptor(_class.prototype,\"oldEntryText\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return\"\";}}),_descriptor4=_applyDecoratedDescriptor(_class.prototype,\"updateOldEntryText\",[action],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){var _this3=this;return function(e){_this3.oldEntryText=e.currentTarget.value;};}}),_applyDecoratedDescriptor(_class.prototype,\"startNameSearch\",[_dec],Object.getOwnPropertyDescriptor(_class.prototype,\"startNameSearch\"),_class.prototype),_descriptor5=_applyDecoratedDescriptor(_class.prototype,\"handleModalCloseRequest\",[action],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){var _this4=this;return(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var markup;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(_this4.currentName==null)){_context2.next=2;break;}throw Error(\"name shouldn't be null\");case 2://take the last name given by the user and insert the proper markup into the box itself\nmarkup=MarkupUtils.makeMarkup(_this4.currentName,_this4.namePickerModalMachine.lastName,_this4.currentName);//add the markup in place of the name\n//TODO: something here\n//TODO: need to make modal into a promise we can wait on here\n//clean up\n_this4.currentName=null;//close the modal\n_this4.modalResponse=markup;//triggers the user has submitted the last name\nreturn _context2.abrupt(\"return\",Promise.resolve());case 6:case\"end\":return _context2.stop();}}},_callee2);})));}})),_class));export var AddMarkupToExistingEntry=observer(_class3=/*#__PURE__*/function(_React$Component){_inherits(AddMarkupToExistingEntry,_React$Component);function AddMarkupToExistingEntry(){_classCallCheck(this,AddMarkupToExistingEntry);return _possibleConstructorReturn(this,_getPrototypeOf(AddMarkupToExistingEntry).apply(this,arguments));}_createClass(AddMarkupToExistingEntry,[{key:\"render\",value:function render(){var _this5=this;return React.createElement(\"div\",null,React.createElement(NamePickerModal,{machine:this.props.machine.namePickerModalMachine,onRequestClose:function onRequestClose(){return _this5.props.machine.handleModalCloseRequest();},isOpen:this.props.machine.currentName!=null,currentName:this.props.machine.currentName==null?\"\":this.props.machine.currentName}),\"Paste old entry here:\",React.createElement(\"br\",null),React.createElement(\"textarea\",{id:\"oldEntry\",value:this.props.machine.oldEntryText,onChange:function onChange(e){return _this5.props.machine.updateOldEntryText(e);},style:{width:\"90%\",height:\"100px\"}}),React.createElement(\"br\",null),React.createElement(\"button\",{onClick:function onClick(){return _this5.props.machine.startNameSearch();}},\"Submit\"),React.createElement(\"br\",null));}}]);return AddMarkupToExistingEntry;}(React.Component))||_class3;export default AddMarkupToExistingEntry;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/AddMarkupToExistingEntry.tsx"],"names":["React","observable","action","observer","NameReference","NamePickerModal","NamePickerModalMachine","MarkupUtils","AddMarkupMachine","bound","namePickerModalMachine","checkerFunction","submitClicked","inp","outputStr","i","length","c","wordSplitCharacters","indexOf","outputText_in","outputText","currentWord","oldEntryText","word","stripWord","isName","modalResponse","currentName","modalPromise","Promise","res","setTimeout","console","log","e","currentTarget","value","Error","markup","makeMarkup","lastName","resolve","AddMarkupToExistingEntry","props","machine","handleModalCloseRequest","updateOldEntryText","width","height","startNameSearch","Component"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {observable, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {NameReference} from \"./NameReference\";\nimport {NamePickerModal, NamePickerModalMachine} from \"./NamePickerModal\";\nimport {MarkupUtils} from \"./MarkupUtils\";\n// import ReactModal from \"react-modal\";\n\nexport class AddMarkupMachine\n{\n  public static get wordSplitCharacters(): string[]\n  {\n    return [\".\", \",\", \"!\", \" \", \"?\", \":\", \";\", \"\\n\", \"'\"];\n  }\n\n  public namePickerModalMachine: NamePickerModalMachine = new NamePickerModalMachine();\n\n  @observable\n  public modalResponse: string | null = null;\n\n  @observable\n  public currentName: string | null = null\n\n  @observable\n  public oldEntryText: string = \"\";\n\n  @action\n  public updateOldEntryText = (e: React.FormEvent<HTMLTextAreaElement>): void => {\n    this.oldEntryText = e.currentTarget.value as string;\n  }\n\n  private stripWord(inp: string): string\n  {\n    let outputStr: string = \"\";\n    for (let i: number = 0; i < inp.length; i++)\n    {\n      let c: string = inp[i];\n      if (AddMarkupMachine.wordSplitCharacters.indexOf(c) > -1)\n      {\n        continue\n      }\n      outputStr += c;\n    }\n    return outputStr;\n  }\n\n  private checkerFunction = (): boolean => {\n    if (this.namePickerModalMachine.submitClicked)\n    {\n      \n    }\n    return false;\n  }\n\n  @action.bound\n  public async startNameSearch(outputText_in: string = \"\"): Promise<void>\n  {\n    // let words: string[] = this.oldEntryText.split(/\\s|\\.|,|:/);\n    // console.log(words);\n    let outputText: string = outputText_in;\n    let currentWord: string = \"\";\n\n    for (let i: number = 0; i < this.oldEntryText.length; i++)\n    {\n      let c: string = this.oldEntryText[i];\n      if (AddMarkupMachine.wordSplitCharacters.indexOf(c) > -1) //boundary\n      {\n        //check if it's a name\n        let word: string = this.stripWord(currentWord);\n        if (NameReference.isName(word))\n        {\n          //show modal\n          this.modalResponse = null;\n          this.currentName = word; //shows modal\n\n          const modalPromise: Promise<void> = new Promise(res => setTimeout(this.checkerFunction, 100));\n          \n\n          // const modalPromise = new Promise((resolve, reject) => this.modalResponse != null)\n          // await modalPromise;\n\n          // this.promiseModal().then(() => console.log(\"After modal\"));\n\n          outputText += this.modalResponse;\n          console.log(outputText);\n          // return this.startNameSearch(outputText);\n\n          return modalPromise;\n        }\n        else\n        {\n          outputText += currentWord;\n        }\n        currentWord = \"\";\n      }\n      else //regular letter\n      {\n        currentWord += c;\n      }\n    }\n  }\n\n  @action\n  public handleModalCloseRequest = async(): Promise<void> => {\n    if (this.currentName == null)\n    {\n      throw Error(\"name shouldn't be null\");\n    }\n    //take the last name given by the user and insert the proper markup into the box itself\n    const markup: string = MarkupUtils.makeMarkup(this.currentName, this.namePickerModalMachine.lastName, this.currentName);\n    //add the markup in place of the name\n\n    //TODO: something here\n    //TODO: need to make modal into a promise we can wait on here\n\n    //clean up\n    this.currentName = null; //close the modal\n\n    this.modalResponse = markup; //triggers the user has submitted the last name\n    return Promise.resolve();\n  };\n\n  // private promiseModal(): Promise<boolean>\n  // {\n  //   return new Promise((resolve, reject) => {\n  //     <Modal \n  //       isOpen={true}\n  //       onRequestClose={() => resolve(true)}\n  //       contentLabel=\"Example Modal\"\n  //     >\n  //       TEST\n  //     </Modal>\n  //   });\n  // }\n}\n\nexport interface AddMarkupProps\n{\n  machine: AddMarkupMachine\n}\n\n@observer\nexport class AddMarkupToExistingEntry extends React.Component<AddMarkupProps>\n{\n\n\n  render()\n  {\n    return <div>\n      <NamePickerModal \n        machine={this.props.machine.namePickerModalMachine}\n        onRequestClose={() => this.props.machine.handleModalCloseRequest()}\n        isOpen={this.props.machine.currentName != null}\n        currentName={this.props.machine.currentName == null ? \"\" : this.props.machine.currentName}\n      />\n      Paste old entry here:<br />\n      <textarea id=\"oldEntry\" \n                value={this.props.machine.oldEntryText} \n                onChange={(e) => this.props.machine.updateOldEntryText(e)}\n                style={{width: \"90%\", height: \"100px\"}}\n      />\n      <br />\n      <button onClick={() => this.props.machine.startNameSearch()}>Submit</button>\n      <br />\n\n    </div>\n    ;\n  }\n}\n\nexport default AddMarkupToExistingEntry;\n"]},"metadata":{},"sourceType":"module"}