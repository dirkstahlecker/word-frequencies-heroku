{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of DraftEditorContents.react.js for tree nodes\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n'use strict';\n\nvar _assign = require(\"object-assign\");\n\nfunction _extends() {\n  _extends = _assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar DraftEditorBlockNode = require(\"./DraftEditorBlockNode.react\");\n\nvar DraftOffsetKey = require(\"./DraftOffsetKey\");\n\nvar React = require(\"react\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n/**\n * `DraftEditorContents` is the container component for all block components\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n * re-rendering blocks whenever possible.\n *\n * This component is separate from `DraftEditor` because certain props\n * (for instance, ARIA props) must be allowed to update without affecting\n * the contents of the editor.\n */\n\n\nvar DraftEditorContentsExperimental =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DraftEditorContentsExperimental, _React$Component);\n\n  function DraftEditorContentsExperimental() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = DraftEditorContentsExperimental.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var prevEditorState = this.props.editorState;\n    var nextEditorState = nextProps.editorState;\n    var prevDirectionMap = prevEditorState.getDirectionMap();\n    var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.\n\n    if (prevDirectionMap !== nextDirectionMap) {\n      return true;\n    }\n\n    var didHaveFocus = prevEditorState.getSelection().getHasFocus();\n    var nowHasFocus = nextEditorState.getSelection().getHasFocus();\n\n    if (didHaveFocus !== nowHasFocus) {\n      return true;\n    }\n\n    var nextNativeContent = nextEditorState.getNativelyRenderedContent();\n    var wasComposing = prevEditorState.isInCompositionMode();\n    var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively\n    // rendered state, there's nothing new to be done.\n\n    if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {\n      return false;\n    }\n\n    var prevContent = prevEditorState.getCurrentContent();\n    var nextContent = nextEditorState.getCurrentContent();\n    var prevDecorator = prevEditorState.getDecorator();\n    var nextDecorator = nextEditorState.getDecorator();\n    return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        blockRenderMap = _this$props.blockRenderMap,\n        blockRendererFn = _this$props.blockRendererFn,\n        blockStyleFn = _this$props.blockStyleFn,\n        customStyleMap = _this$props.customStyleMap,\n        customStyleFn = _this$props.customStyleFn,\n        editorState = _this$props.editorState,\n        editorKey = _this$props.editorKey,\n        textDirectionality = _this$props.textDirectionality;\n    var content = editorState.getCurrentContent();\n    var selection = editorState.getSelection();\n    var forceSelection = editorState.mustForceSelection();\n    var decorator = editorState.getDecorator();\n    var directionMap = nullthrows(editorState.getDirectionMap());\n    var blocksAsArray = content.getBlocksAsArray();\n    var rootBlock = blocksAsArray[0];\n    var processedBlocks = [];\n    var nodeBlock = rootBlock;\n\n    while (nodeBlock) {\n      var blockKey = nodeBlock.getKey();\n      var blockProps = {\n        blockRenderMap: blockRenderMap,\n        blockRendererFn: blockRendererFn,\n        blockStyleFn: blockStyleFn,\n        contentState: content,\n        customStyleFn: customStyleFn,\n        customStyleMap: customStyleMap,\n        decorator: decorator,\n        editorKey: editorKey,\n        editorState: editorState,\n        forceSelection: forceSelection,\n        selection: selection,\n        block: nodeBlock,\n        direction: textDirectionality ? textDirectionality : directionMap.get(blockKey),\n        tree: editorState.getBlockTree(blockKey)\n      };\n      var configForType = blockRenderMap.get(nodeBlock.getType()) || blockRenderMap.get('unstyled');\n      var wrapperTemplate = configForType.wrapper;\n      processedBlocks.push({\n        block: React.createElement(DraftEditorBlockNode, _extends({\n          key: blockKey\n        }, blockProps)),\n        wrapperTemplate: wrapperTemplate,\n        key: blockKey,\n        offsetKey: DraftOffsetKey.encode(blockKey, 0, 0)\n      });\n      var nextBlockKey = nodeBlock.getNextSiblingKey();\n      nodeBlock = nextBlockKey ? content.getBlockForKey(nextBlockKey) : null;\n    } // Group contiguous runs of blocks that have the same wrapperTemplate\n\n\n    var outputBlocks = [];\n\n    for (var ii = 0; ii < processedBlocks.length;) {\n      var info = processedBlocks[ii];\n\n      if (info.wrapperTemplate) {\n        var blocks = [];\n\n        do {\n          blocks.push(processedBlocks[ii].block);\n          ii++;\n        } while (ii < processedBlocks.length && processedBlocks[ii].wrapperTemplate === info.wrapperTemplate);\n\n        var wrapperElement = React.cloneElement(info.wrapperTemplate, {\n          key: info.key + '-wrap',\n          'data-offset-key': info.offsetKey\n        }, blocks);\n        outputBlocks.push(wrapperElement);\n      } else {\n        outputBlocks.push(info.block);\n        ii++;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      \"data-contents\": \"true\"\n    }, outputBlocks);\n  };\n\n  return DraftEditorContentsExperimental;\n}(React.Component);\n\nmodule.exports = DraftEditorContentsExperimental;","map":null,"metadata":{},"sourceType":"script"}