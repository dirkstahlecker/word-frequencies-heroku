{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar utils = require('./utils');\n\nvar sasl = require('./sasl');\n\nvar pgPass = require('pgpass');\n\nvar TypeOverrides = require('./type-overrides');\n\nvar ConnectionParameters = require('./connection-parameters');\n\nvar Query = require('./query');\n\nvar defaults = require('./defaults');\n\nvar Connection = require('./connection');\n\nif (process.env.PG_FAST_CONNECTION) {\n  Connection = require('./connection-fast');\n}\n\nvar Client = function (config) {\n  EventEmitter.call(this);\n  this.connectionParameters = new ConnectionParameters(config);\n  this.user = this.connectionParameters.user;\n  this.database = this.connectionParameters.database;\n  this.port = this.connectionParameters.port;\n  this.host = this.connectionParameters.host;\n  this.password = this.connectionParameters.password;\n  this.replication = this.connectionParameters.replication;\n  var c = config || {};\n  this._Promise = c.Promise || global.Promise;\n  this._types = new TypeOverrides(c.types);\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._connectionError = false;\n  this._queryable = true;\n  this.connection = c.connection || new Connection({\n    stream: c.stream,\n    ssl: this.connectionParameters.ssl,\n    keepAlive: c.keepAlive || false,\n    keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n    encoding: this.connectionParameters.client_encoding || 'utf8'\n  });\n  this.queryQueue = [];\n  this.binary = c.binary || defaults.binary;\n  this.processID = null;\n  this.secretKey = null;\n  this.ssl = this.connectionParameters.ssl || false;\n  this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0;\n};\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.handleError(err, this.connection);\n    });\n  };\n\n  if (this.activeQuery) {\n    enqueueError(this.activeQuery);\n    this.activeQuery = null;\n  }\n\n  this.queryQueue.forEach(enqueueError);\n  this.queryQueue.length = 0;\n};\n\nClient.prototype._connect = function (callback) {\n  var self = this;\n  var con = this.connection;\n\n  if (this._connecting || this._connected) {\n    const err = new Error('Client has already been connected. You cannot reuse a client.');\n    process.nextTick(() => {\n      callback(err);\n    });\n    return;\n  }\n\n  this._connecting = true;\n  var connectionTimeoutHandle;\n\n  if (this._connectionTimeoutMillis > 0) {\n    connectionTimeoutHandle = setTimeout(() => {\n      con._ending = true;\n      con.stream.destroy(new Error('timeout expired'));\n    }, this._connectionTimeoutMillis);\n  }\n\n  if (this.host && this.host.indexOf('/') === 0) {\n    con.connect(this.host + '/.s.PGSQL.' + this.port);\n  } else {\n    con.connect(this.port, this.host);\n  } // once connection is established send startup message\n\n\n  con.on('connect', function () {\n    if (self.ssl) {\n      con.requestSsl();\n    } else {\n      con.startup(self.getStartupConf());\n    }\n  });\n  con.on('sslconnect', function () {\n    con.startup(self.getStartupConf());\n  });\n\n  function checkPgPass(cb) {\n    return function (msg) {\n      if (typeof self.password === 'function') {\n        self._Promise.resolve().then(() => self.password()).then(pass => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'));\n              return;\n            }\n\n            self.connectionParameters.password = self.password = pass;\n          } else {\n            self.connectionParameters.password = self.password = null;\n          }\n\n          cb(msg);\n        }).catch(err => {\n          con.emit('error', err);\n        });\n      } else if (self.password !== null) {\n        cb(msg);\n      } else {\n        pgPass(self.connectionParameters, function (pass) {\n          if (undefined !== pass) {\n            self.connectionParameters.password = self.password = pass;\n          }\n\n          cb(msg);\n        });\n      }\n    };\n  } // password request handling\n\n\n  con.on('authenticationCleartextPassword', checkPgPass(function () {\n    con.password(self.password);\n  })); // password request handling\n\n  con.on('authenticationMD5Password', checkPgPass(function (msg) {\n    con.password(utils.postgresMd5PasswordHash(self.user, self.password, msg.salt));\n  })); // password request handling (SASL)\n\n  var saslSession;\n  con.on('authenticationSASL', checkPgPass(function (msg) {\n    saslSession = sasl.startSession(msg.mechanisms);\n    con.sendSASLInitialResponseMessage(saslSession.mechanism, saslSession.response);\n  })); // password request handling (SASL)\n\n  con.on('authenticationSASLContinue', function (msg) {\n    sasl.continueSession(saslSession, self.password, msg.data);\n    con.sendSCRAMClientFinalMessage(saslSession.response);\n  }); // password request handling (SASL)\n\n  con.on('authenticationSASLFinal', function (msg) {\n    sasl.finalizeSession(saslSession, msg.data);\n    saslSession = null;\n  });\n  con.once('backendKeyData', function (msg) {\n    self.processID = msg.processID;\n    self.secretKey = msg.secretKey;\n  });\n\n  const connectingErrorHandler = err => {\n    if (this._connectionError) {\n      return;\n    }\n\n    this._connectionError = true;\n    clearTimeout(connectionTimeoutHandle);\n\n    if (callback) {\n      return callback(err);\n    }\n\n    this.emit('error', err);\n  };\n\n  const connectedErrorHandler = err => {\n    this._queryable = false;\n\n    this._errorAllQueries(err);\n\n    this.emit('error', err);\n  };\n\n  const connectedErrorMessageHandler = msg => {\n    const activeQuery = this.activeQuery;\n\n    if (!activeQuery) {\n      connectedErrorHandler(msg);\n      return;\n    }\n\n    this.activeQuery = null;\n    activeQuery.handleError(msg, con);\n  };\n\n  con.on('error', connectingErrorHandler);\n  con.on('errorMessage', connectingErrorHandler); // hook up query handling events to connection\n  // after the connection initially becomes ready for queries\n\n  con.once('readyForQuery', function () {\n    self._connecting = false;\n    self._connected = true;\n\n    self._attachListeners(con);\n\n    con.removeListener('error', connectingErrorHandler);\n    con.removeListener('errorMessage', connectingErrorHandler);\n    con.on('error', connectedErrorHandler);\n    con.on('errorMessage', connectedErrorMessageHandler);\n    clearTimeout(connectionTimeoutHandle); // process possible callback argument to Client#connect\n\n    if (callback) {\n      callback(null, self); // remove callback for proper error handling\n      // after the connect event\n\n      callback = null;\n    }\n\n    self.emit('connect');\n  });\n  con.on('readyForQuery', function () {\n    var activeQuery = self.activeQuery;\n    self.activeQuery = null;\n    self.readyForQuery = true;\n\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(con);\n    }\n\n    self._pulseQueryQueue();\n  });\n  con.once('end', () => {\n    const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly');\n    clearTimeout(connectionTimeoutHandle);\n\n    this._errorAllQueries(error);\n\n    if (!this._ending) {\n      // if the connection is ended without us calling .end()\n      // on this client then we have an unexpected disconnection\n      // treat this as an error unless we've already emitted an error\n      // during connection.\n      if (this._connecting && !this._connectionError) {\n        if (callback) {\n          callback(error);\n        } else {\n          connectedErrorHandler(error);\n        }\n      } else if (!this._connectionError) {\n        connectedErrorHandler(error);\n      }\n    }\n\n    process.nextTick(() => {\n      this.emit('end');\n    });\n  });\n  con.on('notice', function (msg) {\n    self.emit('notice', msg);\n  });\n};\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n\n    return;\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nClient.prototype._attachListeners = function (con) {\n  const self = this; // delegate rowDescription to active query\n\n  con.on('rowDescription', function (msg) {\n    self.activeQuery.handleRowDescription(msg);\n  }); // delegate dataRow to active query\n\n  con.on('dataRow', function (msg) {\n    self.activeQuery.handleDataRow(msg);\n  }); // delegate portalSuspended to active query\n  // eslint-disable-next-line no-unused-vars\n\n  con.on('portalSuspended', function (msg) {\n    self.activeQuery.handlePortalSuspended(con);\n  }); // delegate emptyQuery to active query\n  // eslint-disable-next-line no-unused-vars\n\n  con.on('emptyQuery', function (msg) {\n    self.activeQuery.handleEmptyQuery(con);\n  }); // delegate commandComplete to active query\n\n  con.on('commandComplete', function (msg) {\n    self.activeQuery.handleCommandComplete(msg, con);\n  }); // if a prepared statement has a name and properly parses\n  // we track that its already been executed so we don't parse\n  // it again on the same client\n  // eslint-disable-next-line no-unused-vars\n\n  con.on('parseComplete', function (msg) {\n    if (self.activeQuery.name) {\n      con.parsedStatements[self.activeQuery.name] = self.activeQuery.text;\n    }\n  }); // eslint-disable-next-line no-unused-vars\n\n  con.on('copyInResponse', function (msg) {\n    self.activeQuery.handleCopyInResponse(self.connection);\n  });\n  con.on('copyData', function (msg) {\n    self.activeQuery.handleCopyData(msg, self.connection);\n  });\n  con.on('notification', function (msg) {\n    self.emit('notification', msg);\n  });\n};\n\nClient.prototype.getStartupConf = function () {\n  var params = this.connectionParameters;\n  var data = {\n    user: params.user,\n    database: params.database\n  };\n  var appName = params.application_name || params.fallback_application_name;\n\n  if (appName) {\n    data.application_name = appName;\n  }\n\n  if (params.replication) {\n    data.replication = '' + params.replication;\n  }\n\n  if (params.statement_timeout) {\n    data.statement_timeout = String(parseInt(params.statement_timeout, 10));\n  }\n\n  if (params.idle_in_transaction_session_timeout) {\n    data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10));\n  }\n\n  return data;\n};\n\nClient.prototype.cancel = function (client, query) {\n  if (client.activeQuery === query) {\n    var con = this.connection;\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port);\n    } else {\n      con.connect(this.port, this.host);\n    } // once connection is established send cancel message\n\n\n    con.on('connect', function () {\n      con.cancel(client.processID, client.secretKey);\n    });\n  } else if (client.queryQueue.indexOf(query) !== -1) {\n    client.queryQueue.splice(client.queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n}; // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n\n\nClient.prototype.escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n}; // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n\n\nClient.prototype.escapeLiteral = function (str) {\n  var hasBackslash = false;\n  var escaped = '\\'';\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i];\n\n    if (c === '\\'') {\n      escaped += c + c;\n    } else if (c === '\\\\') {\n      escaped += c + c;\n      hasBackslash = true;\n    } else {\n      escaped += c;\n    }\n  }\n\n  escaped += '\\'';\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped;\n  }\n\n  return escaped;\n};\n\nClient.prototype._pulseQueryQueue = function () {\n  if (this.readyForQuery === true) {\n    this.activeQuery = this.queryQueue.shift();\n\n    if (this.activeQuery) {\n      this.readyForQuery = false;\n      this.hasExecuted = true;\n      const queryError = this.activeQuery.submit(this.connection);\n\n      if (queryError) {\n        process.nextTick(() => {\n          this.activeQuery.handleError(queryError, this.connection);\n          this.readyForQuery = true;\n\n          this._pulseQueryQueue();\n        });\n      }\n    } else if (this.hasExecuted) {\n      this.activeQuery = null;\n      this.emit('drain');\n    }\n  }\n};\n\nClient.prototype.query = function (config, values, callback) {\n  // can take in strings, config object or query object\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config;\n\n    if (typeof values === 'function') {\n      query.callback = query.callback || values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new Query(config, values, callback);\n\n    if (!query.callback) {\n      result = new this._Promise((resolve, reject) => {\n        query.callback = (err, res) => err ? reject(err) : resolve(res);\n      });\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error); // we already returned an error,\n      // just do nothing if query completes\n\n      query.callback = () => {}; // Remove from queue\n\n\n      var index = this.queryQueue.indexOf(query);\n\n      if (index > -1) {\n        this.queryQueue.splice(index, 1);\n      }\n\n      this._pulseQueryQueue();\n    }, readTimeout);\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n\n  if (this.binary && !query.binary) {\n    query.binary = true;\n  }\n\n  if (query._result && !query._result._types) {\n    query._result._types = this._types;\n  }\n\n  if (!this._queryable) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection);\n    });\n    return result;\n  }\n\n  if (this._ending) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'), this.connection);\n    });\n    return result;\n  }\n\n  this.queryQueue.push(query);\n\n  this._pulseQueryQueue();\n\n  return result;\n};\n\nClient.prototype.end = function (cb) {\n  this._ending = true;\n\n  if (this.activeQuery || !this._queryable) {\n    // if we have an active query we need to force a disconnect\n    // on the socket - otherwise a hung query could block end forever\n    this.connection.stream.destroy();\n  } else {\n    this.connection.end();\n  }\n\n  if (cb) {\n    this.connection.once('end', cb);\n  } else {\n    return new this._Promise(resolve => {\n      this.connection.once('end', resolve);\n    });\n  }\n}; // expose a Query constructor\n\n\nClient.Query = Query;\nmodule.exports = Client;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/client.js"],"names":["EventEmitter","require","util","utils","sasl","pgPass","TypeOverrides","ConnectionParameters","Query","defaults","Connection","process","env","PG_FAST_CONNECTION","Client","config","call","connectionParameters","user","database","port","host","password","replication","c","_Promise","Promise","global","_types","types","_ending","_connecting","_connected","_connectionError","_queryable","connection","stream","ssl","keepAlive","keepAliveInitialDelayMillis","encoding","client_encoding","queryQueue","binary","processID","secretKey","_connectionTimeoutMillis","connectionTimeoutMillis","inherits","prototype","_errorAllQueries","err","enqueueError","query","nextTick","handleError","activeQuery","forEach","length","_connect","callback","self","con","Error","connectionTimeoutHandle","setTimeout","destroy","indexOf","connect","on","requestSsl","startup","getStartupConf","checkPgPass","cb","msg","resolve","then","pass","undefined","emit","TypeError","catch","postgresMd5PasswordHash","salt","saslSession","startSession","mechanisms","sendSASLInitialResponseMessage","mechanism","response","continueSession","data","sendSCRAMClientFinalMessage","finalizeSession","once","connectingErrorHandler","clearTimeout","connectedErrorHandler","connectedErrorMessageHandler","_attachListeners","removeListener","readyForQuery","handleReadyForQuery","_pulseQueryQueue","error","reject","handleRowDescription","handleDataRow","handlePortalSuspended","handleEmptyQuery","handleCommandComplete","name","parsedStatements","text","handleCopyInResponse","handleCopyData","params","appName","application_name","fallback_application_name","statement_timeout","String","parseInt","idle_in_transaction_session_timeout","cancel","client","splice","setTypeParser","oid","format","parseFn","getTypeParser","escapeIdentifier","str","replace","escapeLiteral","hasBackslash","escaped","i","shift","hasExecuted","queryError","submit","values","result","readTimeout","readTimeoutTimer","queryCallback","query_timeout","res","index","_result","push","end","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('./utils')\nvar sasl = require('./sasl')\nvar pgPass = require('pgpass')\nvar TypeOverrides = require('./type-overrides')\n\nvar ConnectionParameters = require('./connection-parameters')\nvar Query = require('./query')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nif (process.env.PG_FAST_CONNECTION) {\n  Connection = require('./connection-fast')\n}\n\nvar Client = function (config) {\n  EventEmitter.call(this)\n\n  this.connectionParameters = new ConnectionParameters(config)\n  this.user = this.connectionParameters.user\n  this.database = this.connectionParameters.database\n  this.port = this.connectionParameters.port\n  this.host = this.connectionParameters.host\n  this.password = this.connectionParameters.password\n  this.replication = this.connectionParameters.replication\n\n  var c = config || {}\n\n  this._Promise = c.Promise || global.Promise\n  this._types = new TypeOverrides(c.types)\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._connectionError = false\n  this._queryable = true\n\n  this.connection = c.connection || new Connection({\n    stream: c.stream,\n    ssl: this.connectionParameters.ssl,\n    keepAlive: c.keepAlive || false,\n    keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n    encoding: this.connectionParameters.client_encoding || 'utf8'\n  })\n  this.queryQueue = []\n  this.binary = c.binary || defaults.binary\n  this.processID = null\n  this.secretKey = null\n  this.ssl = this.connectionParameters.ssl || false\n  this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n}\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.handleError(err, this.connection)\n    })\n  }\n\n  if (this.activeQuery) {\n    enqueueError(this.activeQuery)\n    this.activeQuery = null\n  }\n\n  this.queryQueue.forEach(enqueueError)\n  this.queryQueue.length = 0\n}\n\nClient.prototype._connect = function (callback) {\n  var self = this\n  var con = this.connection\n  if (this._connecting || this._connected) {\n    const err = new Error('Client has already been connected. You cannot reuse a client.')\n    process.nextTick(() => {\n      callback(err)\n    })\n    return\n  }\n  this._connecting = true\n\n  var connectionTimeoutHandle\n  if (this._connectionTimeoutMillis > 0) {\n    connectionTimeoutHandle = setTimeout(() => {\n      con._ending = true\n      con.stream.destroy(new Error('timeout expired'))\n    }, this._connectionTimeoutMillis)\n  }\n\n  if (this.host && this.host.indexOf('/') === 0) {\n    con.connect(this.host + '/.s.PGSQL.' + this.port)\n  } else {\n    con.connect(this.port, this.host)\n  }\n\n  // once connection is established send startup message\n  con.on('connect', function () {\n    if (self.ssl) {\n      con.requestSsl()\n    } else {\n      con.startup(self.getStartupConf())\n    }\n  })\n\n  con.on('sslconnect', function () {\n    con.startup(self.getStartupConf())\n  })\n\n  function checkPgPass(cb) {\n    return function (msg) {\n      if (typeof self.password === 'function') {\n        self._Promise.resolve()\n          .then(() => self.password())\n          .then(pass => {\n            if (pass !== undefined) {\n              if (typeof pass !== 'string') {\n                con.emit('error', new TypeError('Password must be a string'))\n                return\n              }\n              self.connectionParameters.password = self.password = pass\n            } else {\n              self.connectionParameters.password = self.password = null\n            }\n            cb(msg)\n          }).catch(err => {\n            con.emit('error', err)\n          })\n      } else if (self.password !== null) {\n        cb(msg)\n      } else {\n        pgPass(self.connectionParameters, function (pass) {\n          if (undefined !== pass) {\n            self.connectionParameters.password = self.password = pass\n          }\n          cb(msg)\n        })\n      }\n    }\n  }\n\n  // password request handling\n  con.on('authenticationCleartextPassword', checkPgPass(function () {\n    con.password(self.password)\n  }))\n\n  // password request handling\n  con.on('authenticationMD5Password', checkPgPass(function (msg) {\n    con.password(utils.postgresMd5PasswordHash(self.user, self.password, msg.salt))\n  }))\n\n  // password request handling (SASL)\n  var saslSession\n  con.on('authenticationSASL', checkPgPass(function (msg) {\n    saslSession = sasl.startSession(msg.mechanisms)\n\n    con.sendSASLInitialResponseMessage(saslSession.mechanism, saslSession.response)\n  }))\n\n  // password request handling (SASL)\n  con.on('authenticationSASLContinue', function (msg) {\n    sasl.continueSession(saslSession, self.password, msg.data)\n\n    con.sendSCRAMClientFinalMessage(saslSession.response)\n  })\n\n  // password request handling (SASL)\n  con.on('authenticationSASLFinal', function (msg) {\n    sasl.finalizeSession(saslSession, msg.data)\n\n    saslSession = null\n  })\n\n  con.once('backendKeyData', function (msg) {\n    self.processID = msg.processID\n    self.secretKey = msg.secretKey\n  })\n\n  const connectingErrorHandler = (err) => {\n    if (this._connectionError) {\n      return\n    }\n    this._connectionError = true\n    clearTimeout(connectionTimeoutHandle)\n    if (callback) {\n      return callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  const connectedErrorHandler = (err) => {\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  const connectedErrorMessageHandler = (msg) => {\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      connectedErrorHandler(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, con)\n  }\n\n  con.on('error', connectingErrorHandler)\n  con.on('errorMessage', connectingErrorHandler)\n\n  // hook up query handling events to connection\n  // after the connection initially becomes ready for queries\n  con.once('readyForQuery', function () {\n    self._connecting = false\n    self._connected = true\n    self._attachListeners(con)\n    con.removeListener('error', connectingErrorHandler)\n    con.removeListener('errorMessage', connectingErrorHandler)\n    con.on('error', connectedErrorHandler)\n    con.on('errorMessage', connectedErrorMessageHandler)\n    clearTimeout(connectionTimeoutHandle)\n\n    // process possible callback argument to Client#connect\n    if (callback) {\n      callback(null, self)\n      // remove callback for proper error handling\n      // after the connect event\n      callback = null\n    }\n    self.emit('connect')\n  })\n\n  con.on('readyForQuery', function () {\n    var activeQuery = self.activeQuery\n    self.activeQuery = null\n    self.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(con)\n    }\n    self._pulseQueryQueue()\n  })\n\n  con.once('end', () => {\n    const error = this._ending\n      ? new Error('Connection terminated')\n      : new Error('Connection terminated unexpectedly')\n\n    clearTimeout(connectionTimeoutHandle)\n    this._errorAllQueries(error)\n\n    if (!this._ending) {\n      // if the connection is ended without us calling .end()\n      // on this client then we have an unexpected disconnection\n      // treat this as an error unless we've already emitted an error\n      // during connection.\n      if (this._connecting && !this._connectionError) {\n        if (callback) {\n          callback(error)\n        } else {\n          connectedErrorHandler(error)\n        }\n      } else if (!this._connectionError) {\n        connectedErrorHandler(error)\n      }\n    }\n\n    process.nextTick(() => {\n      this.emit('end')\n    })\n  })\n\n  con.on('notice', function (msg) {\n    self.emit('notice', msg)\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\nClient.prototype._attachListeners = function (con) {\n  const self = this\n  // delegate rowDescription to active query\n  con.on('rowDescription', function (msg) {\n    self.activeQuery.handleRowDescription(msg)\n  })\n\n  // delegate dataRow to active query\n  con.on('dataRow', function (msg) {\n    self.activeQuery.handleDataRow(msg)\n  })\n\n  // delegate portalSuspended to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('portalSuspended', function (msg) {\n    self.activeQuery.handlePortalSuspended(con)\n  })\n\n  // delegate emptyQuery to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('emptyQuery', function (msg) {\n    self.activeQuery.handleEmptyQuery(con)\n  })\n\n  // delegate commandComplete to active query\n  con.on('commandComplete', function (msg) {\n    self.activeQuery.handleCommandComplete(msg, con)\n  })\n\n  // if a prepared statement has a name and properly parses\n  // we track that its already been executed so we don't parse\n  // it again on the same client\n  // eslint-disable-next-line no-unused-vars\n  con.on('parseComplete', function (msg) {\n    if (self.activeQuery.name) {\n      con.parsedStatements[self.activeQuery.name] = self.activeQuery.text\n    }\n  })\n\n  // eslint-disable-next-line no-unused-vars\n  con.on('copyInResponse', function (msg) {\n    self.activeQuery.handleCopyInResponse(self.connection)\n  })\n\n  con.on('copyData', function (msg) {\n    self.activeQuery.handleCopyData(msg, self.connection)\n  })\n\n  con.on('notification', function (msg) {\n    self.emit('notification', msg)\n  })\n}\n\nClient.prototype.getStartupConf = function () {\n  var params = this.connectionParameters\n\n  var data = {\n    user: params.user,\n    database: params.database\n  }\n\n  var appName = params.application_name || params.fallback_application_name\n  if (appName) {\n    data.application_name = appName\n  }\n  if (params.replication) {\n    data.replication = '' + params.replication\n  }\n  if (params.statement_timeout) {\n    data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n  }\n  if (params.idle_in_transaction_session_timeout) {\n    data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n  }\n\n  return data\n}\n\nClient.prototype.cancel = function (client, query) {\n  if (client.activeQuery === query) {\n    var con = this.connection\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send cancel message\n    con.on('connect', function () {\n      con.cancel(client.processID, client.secretKey)\n    })\n  } else if (client.queryQueue.indexOf(query) !== -1) {\n    client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeLiteral = function (str) {\n  var hasBackslash = false\n  var escaped = '\\''\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    if (c === '\\'') {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += '\\''\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nClient.prototype._pulseQueryQueue = function () {\n  if (this.readyForQuery === true) {\n    this.activeQuery = this.queryQueue.shift()\n    if (this.activeQuery) {\n      this.readyForQuery = false\n      this.hasExecuted = true\n\n      const queryError = this.activeQuery.submit(this.connection)\n      if (queryError) {\n        process.nextTick(() => {\n          this.activeQuery.handleError(queryError, this.connection)\n          this.readyForQuery = true\n          this._pulseQueryQueue()\n        })\n      }\n    } else if (this.hasExecuted) {\n      this.activeQuery = null\n      this.emit('drain')\n    }\n  }\n}\n\nClient.prototype.query = function (config, values, callback) {\n  // can take in strings, config object or query object\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    if (typeof values === 'function') {\n      query.callback = query.callback || values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new Query(config, values, callback)\n    if (!query.callback) {\n      result = new this._Promise((resolve, reject) => {\n        query.callback = (err, res) => err ? reject(err) : resolve(res)\n      })\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => { }\n\n      // Remove from queue\n      var index = this.queryQueue.indexOf(query)\n      if (index > -1) {\n        this.queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (this.binary && !query.binary) {\n    query.binary = true\n  }\n\n  if (query._result && !query._result._types) {\n    query._result._types = this._types\n  }\n\n  if (!this._queryable) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n    })\n    return result\n  }\n\n  if (this._ending) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n    })\n    return result\n  }\n\n  this.queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\nClient.prototype.end = function (cb) {\n  this._ending = true\n\n  if (this.activeQuery || !this._queryable) {\n    // if we have an active query we need to force a disconnect\n    // on the socket - otherwise a hung query could block end forever\n    this.connection.stream.destroy()\n  } else {\n    this.connection.end()\n  }\n\n  if (cb) {\n    this.connection.once('end', cb)\n  } else {\n    return new this._Promise((resolve) => {\n      this.connection.once('end', resolve)\n    })\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}