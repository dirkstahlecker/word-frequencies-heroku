{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar net = require('net');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar Writer = require('buffer-writer'); // eslint-disable-next-line\n\n\nvar PacketStream = require('pg-packet-stream');\n\nvar warnDeprecation = require('./compat/warn-deprecation');\n\nvar TEXT_MODE = 0; // TODO(bmc) support binary mode here\n// var BINARY_MODE = 1\n\nconsole.log('using faster connection');\n\nvar Connection = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this.stream = config.stream || new net.Socket();\n  this.stream.setNoDelay(true);\n  this._keepAlive = config.keepAlive;\n  this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis;\n  this.lastBuffer = false;\n  this.lastOffset = 0;\n  this.buffer = null;\n  this.offset = null;\n  this.encoding = config.encoding || 'utf8';\n  this.parsedStatements = {};\n  this.writer = new Writer();\n  this.ssl = config.ssl || false;\n  this._ending = false;\n  this._mode = TEXT_MODE;\n  this._emitMessage = false;\n  var self = this;\n  this.on('newListener', function (eventName) {\n    if (eventName === 'message') {\n      self._emitMessage = true;\n    }\n  });\n};\n\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype.connect = function (port, host) {\n  var self = this;\n\n  if (this.stream.readyState === 'closed') {\n    this.stream.connect(port, host);\n  } else if (this.stream.readyState === 'open') {\n    this.emit('connect');\n  }\n\n  this.stream.on('connect', function () {\n    if (self._keepAlive) {\n      self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis);\n    }\n\n    self.emit('connect');\n  });\n\n  const reportStreamError = function (error) {\n    // errors about disconnections should be ignored during disconnect\n    if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n      return;\n    }\n\n    self.emit('error', error);\n  };\n\n  this.stream.on('error', reportStreamError);\n  this.stream.on('close', function () {\n    self.emit('end');\n  });\n\n  if (!this.ssl) {\n    return this.attachListeners(this.stream);\n  }\n\n  this.stream.once('data', function (buffer) {\n    var responseCode = buffer.toString('utf8');\n\n    switch (responseCode) {\n      case 'N':\n        // Server does not support SSL connections\n        return self.emit('error', new Error('The server does not support SSL connections'));\n\n      case 'S':\n        // Server supports SSL connections, continue with a secure connection\n        break;\n\n      default:\n        // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n        return self.emit('error', new Error('There was an error establishing an SSL connection'));\n    }\n\n    var tls = require('tls');\n\n    const options = {\n      socket: self.stream,\n      checkServerIdentity: self.ssl.checkServerIdentity || tls.checkServerIdentity,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      secureOptions: self.ssl.secureOptions,\n      NPNProtocols: self.ssl.NPNProtocols\n    };\n\n    if (typeof self.ssl.rejectUnauthorized !== 'boolean') {\n      warnDeprecation('Implicit disabling of certificate verification is deprecated and will be removed in pg 8. Specify `rejectUnauthorized: true` to require a valid CA or `rejectUnauthorized: false` to explicitly opt out of MITM protection.', 'PG-SSL-VERIFY');\n    }\n\n    if (net.isIP(host) === 0) {\n      options.servername = host;\n    }\n\n    self.stream = tls.connect(options);\n    self.attachListeners(self.stream);\n    self.stream.on('error', reportStreamError);\n    self.emit('sslconnect');\n  });\n};\n\nConnection.prototype.attachListeners = function (stream) {\n  var self = this;\n  const mode = this._mode === TEXT_MODE ? 'text' : 'binary';\n  const packetStream = new PacketStream.PgPacketStream({\n    mode\n  });\n  this.stream.pipe(packetStream);\n  packetStream.on('data', msg => {\n    var eventName = msg.name === 'error' ? 'errorMessage' : msg.name;\n\n    if (self._emitMessage) {\n      self.emit('message', msg);\n    }\n\n    self.emit(eventName, msg);\n  });\n  stream.on('end', function () {\n    self.emit('end');\n  });\n};\n\nConnection.prototype.requestSsl = function () {\n  var bodyBuffer = this.writer.addInt16(0x04d2).addInt16(0x162f).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.startup = function (config) {\n  var writer = this.writer.addInt16(3).addInt16(0);\n  Object.keys(config).forEach(function (key) {\n    var val = config[key];\n    writer.addCString(key).addCString(val);\n  });\n  writer.addCString('client_encoding').addCString(\"'utf-8'\");\n  var bodyBuffer = writer.addCString('').flush(); // this message is sent without a code\n\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.cancel = function (processID, secretKey) {\n  var bodyBuffer = this.writer.addInt16(1234).addInt16(5678).addInt32(processID).addInt32(secretKey).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.password = function (password) {\n  // 0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password));\n};\n\nConnection.prototype.sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  this.writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n\n  this._send(0x70);\n};\n\nConnection.prototype.sendSCRAMClientFinalMessage = function (additionalData) {\n  // 0x70 = 'p'\n  this.writer.addString(additionalData);\n\n  this._send(0x70);\n};\n\nConnection.prototype._send = function (code, more) {\n  if (!this.stream.writable) {\n    return false;\n  }\n\n  return this.stream.write(this.writer.flush(code));\n};\n\nConnection.prototype.query = function (text) {\n  // 0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51));\n}; // send parse message\n\n\nConnection.prototype.parse = function (query) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n  // normalize missing query names to allow for null\n  query.name = query.name || '';\n\n  if (query.name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied %s (%s)', query.name, query.name.length);\n    console.error('This can cause conflicts and silent errors executing queries');\n    /* eslint-enable no-console */\n  } // normalize null type array\n\n\n  query.types = query.types || [];\n  var len = query.types.length;\n  var buffer = this.writer.addCString(query.name) // name of query\n  .addCString(query.text) // actual query text\n  .addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i]);\n  }\n\n  var code = 0x50;\n\n  this._send(code);\n\n  this.flush();\n}; // send bind message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.bind = function (config) {\n  // normalize config\n  config = config || {};\n  config.portal = config.portal || '';\n  config.statement = config.statement || '';\n  config.binary = config.binary || false;\n  var values = config.values || [];\n  var len = values.length;\n  var useBinary = false;\n\n  for (var j = 0; j < len; j++) {\n    useBinary |= values[j] instanceof Buffer;\n  }\n\n  var buffer = this.writer.addCString(config.portal).addCString(config.statement);\n\n  if (!useBinary) {\n    buffer.addInt16(0);\n  } else {\n    buffer.addInt16(len);\n\n    for (j = 0; j < len; j++) {\n      buffer.addInt16(values[j] instanceof Buffer);\n    }\n  }\n\n  buffer.addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    var val = values[i];\n\n    if (val === null || typeof val === 'undefined') {\n      buffer.addInt32(-1);\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length);\n      buffer.add(val);\n    } else {\n      buffer.addInt32(Buffer.byteLength(val));\n      buffer.addString(val);\n    }\n  }\n\n  if (config.binary) {\n    buffer.addInt16(1); // format codes to use binary\n\n    buffer.addInt16(1);\n  } else {\n    buffer.addInt16(0); // format codes to use text\n  } // 0x42 = 'B'\n\n\n  this._send(0x42);\n\n  this.flush();\n}; // send execute message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.execute = function (config) {\n  config = config || {};\n  config.portal = config.portal || '';\n  config.rows = config.rows || '';\n  this.writer.addCString(config.portal).addInt32(config.rows); // 0x45 = 'E'\n\n  this._send(0x45);\n\n  this.flush();\n};\n\nvar emptyBuffer = Buffer.alloc(0);\nconst flushBuffer = Buffer.from([0x48, 0x00, 0x00, 0x00, 0x04]);\n\nConnection.prototype.flush = function () {\n  if (this.stream.writable) {\n    this.stream.write(flushBuffer);\n  }\n};\n\nconst syncBuffer = Buffer.from([0x53, 0x00, 0x00, 0x00, 0x04]);\n\nConnection.prototype.sync = function () {\n  this._ending = true; // clear out any pending data in the writer\n\n  this.writer.clear();\n\n  if (this.stream.writable) {\n    this.stream.write(syncBuffer);\n    this.stream.write(flushBuffer);\n  }\n};\n\nconst END_BUFFER = Buffer.from([0x58, 0x00, 0x00, 0x00, 0x04]);\n\nConnection.prototype.end = function () {\n  // 0x58 = 'X'\n  this.writer.clear();\n  this._ending = true;\n  return this.stream.write(END_BUFFER, () => {\n    this.stream.end();\n  });\n};\n\nConnection.prototype.close = function (msg) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x43);\n};\n\nConnection.prototype.describe = function (msg) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x44);\n\n  this.flush();\n};\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64));\n};\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63));\n};\n\nConnection.prototype.sendCopyFail = function (msg) {\n  // this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg);\n\n  this._send(0x66);\n};\n\nmodule.exports = Connection;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/connection-fast.js"],"names":["net","require","EventEmitter","util","Writer","PacketStream","warnDeprecation","TEXT_MODE","console","log","Connection","config","call","stream","Socket","setNoDelay","_keepAlive","keepAlive","_keepAliveInitialDelayMillis","keepAliveInitialDelayMillis","lastBuffer","lastOffset","buffer","offset","encoding","parsedStatements","writer","ssl","_ending","_mode","_emitMessage","self","on","eventName","inherits","prototype","connect","port","host","readyState","emit","setKeepAlive","reportStreamError","error","code","attachListeners","once","responseCode","toString","Error","tls","options","socket","checkServerIdentity","rejectUnauthorized","ca","pfx","key","passphrase","cert","secureOptions","NPNProtocols","isIP","servername","mode","packetStream","PgPacketStream","pipe","msg","name","requestSsl","bodyBuffer","addInt16","flush","length","addInt32","add","join","write","startup","Object","keys","forEach","val","addCString","cancel","processID","secretKey","password","_send","sendSASLInitialResponseMessage","mechanism","initialResponse","Buffer","byteLength","addString","sendSCRAMClientFinalMessage","additionalData","more","writable","query","text","parse","types","len","i","bind","portal","statement","binary","values","useBinary","j","execute","rows","emptyBuffer","alloc","flushBuffer","from","syncBuffer","sync","clear","END_BUFFER","end","close","type","describe","sendCopyFromChunk","chunk","endCopyFrom","sendCopyFail","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar net = require('net')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nvar Writer = require('buffer-writer')\n// eslint-disable-next-line\nvar PacketStream = require('pg-packet-stream')\n\nvar warnDeprecation = require('./compat/warn-deprecation')\n\nvar TEXT_MODE = 0\n\n// TODO(bmc) support binary mode here\n// var BINARY_MODE = 1\nconsole.log('using faster connection')\nvar Connection = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n  this.stream = config.stream || new net.Socket()\n  this.stream.setNoDelay(true)\n  this._keepAlive = config.keepAlive\n  this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n  this.lastBuffer = false\n  this.lastOffset = 0\n  this.buffer = null\n  this.offset = null\n  this.encoding = config.encoding || 'utf8'\n  this.parsedStatements = {}\n  this.writer = new Writer()\n  this.ssl = config.ssl || false\n  this._ending = false\n  this._mode = TEXT_MODE\n  this._emitMessage = false\n  var self = this\n  this.on('newListener', function (eventName) {\n    if (eventName === 'message') {\n      self._emitMessage = true\n    }\n  })\n}\n\nutil.inherits(Connection, EventEmitter)\n\nConnection.prototype.connect = function (port, host) {\n  var self = this\n\n  if (this.stream.readyState === 'closed') {\n    this.stream.connect(port, host)\n  } else if (this.stream.readyState === 'open') {\n    this.emit('connect')\n  }\n\n  this.stream.on('connect', function () {\n    if (self._keepAlive) {\n      self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n    }\n    self.emit('connect')\n  })\n\n  const reportStreamError = function (error) {\n    // errors about disconnections should be ignored during disconnect\n    if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n      return\n    }\n    self.emit('error', error)\n  }\n  this.stream.on('error', reportStreamError)\n\n  this.stream.on('close', function () {\n    self.emit('end')\n  })\n\n  if (!this.ssl) {\n    return this.attachListeners(this.stream)\n  }\n\n  this.stream.once('data', function (buffer) {\n    var responseCode = buffer.toString('utf8')\n    switch (responseCode) {\n      case 'N': // Server does not support SSL connections\n        return self.emit('error', new Error('The server does not support SSL connections'))\n      case 'S': // Server supports SSL connections, continue with a secure connection\n        break\n      default:\n        // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n        return self.emit('error', new Error('There was an error establishing an SSL connection'))\n    }\n    var tls = require('tls')\n    const options = {\n      socket: self.stream,\n      checkServerIdentity: self.ssl.checkServerIdentity || tls.checkServerIdentity,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      secureOptions: self.ssl.secureOptions,\n      NPNProtocols: self.ssl.NPNProtocols\n    }\n    if (typeof self.ssl.rejectUnauthorized !== 'boolean') {\n      warnDeprecation('Implicit disabling of certificate verification is deprecated and will be removed in pg 8. Specify `rejectUnauthorized: true` to require a valid CA or `rejectUnauthorized: false` to explicitly opt out of MITM protection.', 'PG-SSL-VERIFY')\n    }\n    if (net.isIP(host) === 0) {\n      options.servername = host\n    }\n    self.stream = tls.connect(options)\n    self.attachListeners(self.stream)\n    self.stream.on('error', reportStreamError)\n\n    self.emit('sslconnect')\n  })\n}\n\nConnection.prototype.attachListeners = function (stream) {\n  var self = this\n  const mode = this._mode === TEXT_MODE ? 'text' : 'binary'\n  const packetStream = new PacketStream.PgPacketStream({ mode })\n  this.stream.pipe(packetStream)\n  packetStream.on('data', (msg) => {\n    var eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n    if (self._emitMessage) {\n      self.emit('message', msg)\n    }\n    self.emit(eventName, msg)\n  })\n  stream.on('end', function () {\n    self.emit('end')\n  })\n}\n\nConnection.prototype.requestSsl = function () {\n  var bodyBuffer = this.writer\n    .addInt16(0x04d2)\n    .addInt16(0x162f)\n    .flush()\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.startup = function (config) {\n  var writer = this.writer.addInt16(3).addInt16(0)\n\n  Object.keys(config).forEach(function (key) {\n    var val = config[key]\n    writer.addCString(key).addCString(val)\n  })\n\n  writer.addCString('client_encoding').addCString(\"'utf-8'\")\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.cancel = function (processID, secretKey) {\n  var bodyBuffer = this.writer\n    .addInt16(1234)\n    .addInt16(5678)\n    .addInt32(processID)\n    .addInt32(secretKey)\n    .flush()\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.password = function (password) {\n  // 0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password))\n}\n\nConnection.prototype.sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  this.writer\n    .addCString(mechanism)\n    .addInt32(Buffer.byteLength(initialResponse))\n    .addString(initialResponse)\n\n  this._send(0x70)\n}\n\nConnection.prototype.sendSCRAMClientFinalMessage = function (additionalData) {\n  // 0x70 = 'p'\n  this.writer.addString(additionalData)\n\n  this._send(0x70)\n}\n\nConnection.prototype._send = function (code, more) {\n  if (!this.stream.writable) {\n    return false\n  }\n  return this.stream.write(this.writer.flush(code))\n}\n\nConnection.prototype.query = function (text) {\n  // 0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51))\n}\n\n// send parse message\nConnection.prototype.parse = function (query) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  query.name = query.name || ''\n  if (query.name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', query.name, query.name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n  // normalize null type array\n  query.types = query.types || []\n  var len = query.types.length\n  var buffer = this.writer\n    .addCString(query.name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i])\n  }\n\n  var code = 0x50\n  this._send(code)\n  this.flush()\n}\n\n// send bind message\n// \"more\" === true to buffer the message until flush() is called\nConnection.prototype.bind = function (config) {\n  // normalize config\n  config = config || {}\n  config.portal = config.portal || ''\n  config.statement = config.statement || ''\n  config.binary = config.binary || false\n  var values = config.values || []\n  var len = values.length\n  var useBinary = false\n  for (var j = 0; j < len; j++) {\n    useBinary |= values[j] instanceof Buffer\n  }\n  var buffer = this.writer.addCString(config.portal).addCString(config.statement)\n  if (!useBinary) {\n    buffer.addInt16(0)\n  } else {\n    buffer.addInt16(len)\n    for (j = 0; j < len; j++) {\n      buffer.addInt16(values[j] instanceof Buffer)\n    }\n  }\n  buffer.addInt16(len)\n  for (var i = 0; i < len; i++) {\n    var val = values[i]\n    if (val === null || typeof val === 'undefined') {\n      buffer.addInt32(-1)\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length)\n      buffer.add(val)\n    } else {\n      buffer.addInt32(Buffer.byteLength(val))\n      buffer.addString(val)\n    }\n  }\n\n  if (config.binary) {\n    buffer.addInt16(1) // format codes to use binary\n    buffer.addInt16(1)\n  } else {\n    buffer.addInt16(0) // format codes to use text\n  }\n  // 0x42 = 'B'\n  this._send(0x42)\n  this.flush()\n}\n\n// send execute message\n// \"more\" === true to buffer the message until flush() is called\nConnection.prototype.execute = function (config) {\n  config = config || {}\n  config.portal = config.portal || ''\n  config.rows = config.rows || ''\n  this.writer.addCString(config.portal).addInt32(config.rows)\n\n  // 0x45 = 'E'\n  this._send(0x45)\n  this.flush()\n}\n\nvar emptyBuffer = Buffer.alloc(0)\n\nconst flushBuffer = Buffer.from([0x48, 0x00, 0x00, 0x00, 0x04])\nConnection.prototype.flush = function () {\n  if (this.stream.writable) {\n    this.stream.write(flushBuffer)\n  }\n}\n\nconst syncBuffer = Buffer.from([0x53, 0x00, 0x00, 0x00, 0x04])\nConnection.prototype.sync = function () {\n  this._ending = true\n  // clear out any pending data in the writer\n  this.writer.clear()\n  if (this.stream.writable) {\n    this.stream.write(syncBuffer)\n    this.stream.write(flushBuffer)\n  }\n}\n\nconst END_BUFFER = Buffer.from([0x58, 0x00, 0x00, 0x00, 0x04])\n\nConnection.prototype.end = function () {\n  // 0x58 = 'X'\n  this.writer.clear()\n  this._ending = true\n  return this.stream.write(END_BUFFER, () => {\n    this.stream.end()\n  })\n}\n\nConnection.prototype.close = function (msg) {\n  this.writer.addCString(msg.type + (msg.name || ''))\n  this._send(0x43)\n}\n\nConnection.prototype.describe = function (msg) {\n  this.writer.addCString(msg.type + (msg.name || ''))\n  this._send(0x44)\n  this.flush()\n}\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64))\n}\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63))\n}\n\nConnection.prototype.sendCopyFail = function (msg) {\n  // this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg)\n  this._send(0x66)\n}\n\nmodule.exports = Connection\n"]},"metadata":{},"sourceType":"script"}