{"ast":null,"code":"var _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/NamesDB.tsx\";\nimport { Markup } from \"./Markup\";\nimport * as React from \"react\"; // export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo {\n  constructor(word, count, date) {\n    this._word = void 0;\n    this._count = void 0;\n    this._dates = new Set();\n    this._word = word;\n    this._count = count;\n\n    if (date !== undefined) {\n      this.addDate(date);\n    }\n  }\n\n  get word() {\n    return this._word;\n  }\n\n  set word(value) {\n    this._word = value;\n  }\n\n  get count() {\n    return this._count;\n  }\n\n  set count(value) {\n    this._count = value;\n  }\n\n  get dates() {\n    return this._dates;\n  }\n\n  addDate(date) {\n    this._dates.add(date);\n  }\n\n  clearDates() {\n    this._dates.clear();\n  }\n\n  getSortedDates() {\n    const sortedArray = Array.from(this._dates).sort((a, b) => {\n      return a.getTime() - b.getTime();\n    });\n    return sortedArray;\n  }\n\n  getFirstDate() {\n    return this.getSortedDates()[0];\n  }\n\n  getLastDate() {\n    const sortedDates = this.getSortedDates();\n    return sortedDates[sortedDates.length - 1];\n  }\n\n  makeHtmlElement() {\n    console.error(\"Not implemented\");\n    return null;\n  }\n\n} //word is firstName_lastName\n\nexport class NameInfo extends WordInfo {\n  constructor(markup, count, date) {\n    super(markup.getKey(), count, date);\n    this.displayNames = void 0;\n    this._markup = void 0;\n    this._markup = markup;\n    this.displayNames = [markup.displayName];\n  }\n\n  set word(value) {\n    if (!Markup.isMarkup(value)) {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n\n    this._word = Markup.create(value).getKey();\n  }\n\n  get word() {\n    return this.markup.displayName; //TODO:\n  }\n\n  get markup() {\n    return this._markup;\n  }\n\n  addDisplayName(displayName) {\n    console.error(\"Not implemented\");\n  } //display name doesn't matter - only first and last name pair is unique\n\n\n  static equals(a, b) {\n    return a.markup.firstName === b.markup.firstName && a.markup.lastName === b.markup.lastName;\n  } //key is used as the map key to group unique first/last name pairs regardless\n  //of display names\n\n\n  getKey() {\n    return this.markup.getKey();\n  }\n\n  makeTooltip() {\n    const markup = this.markup;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, \"Display Names: \", this.displayNames.map(displayName => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 20\n        }\n      }, displayName, \",\\xA0\");\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, \"Unique Days:\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }, \"Average usages per day:\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  makeHtmlElememt() {\n    if (markup == null || markup.firstName == null || markup.lastName == null || markup.displayName == null) {\n      return null;\n    } //TODO: show multiple display names\n\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"rendered-markup-display-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 12\n      }\n    }, markup.firstName + \" \" + markup.lastName, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }, this.makeTooltip()));\n  }\n\n}","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/stats/NamesDB.tsx"],"names":["Markup","React","WordInfo","constructor","word","count","date","_word","_count","_dates","Set","undefined","addDate","value","dates","add","clearDates","clear","getSortedDates","sortedArray","Array","from","sort","a","b","getTime","getFirstDate","getLastDate","sortedDates","length","makeHtmlElement","console","error","NameInfo","markup","getKey","displayNames","_markup","displayName","isMarkup","Error","create","addDisplayName","equals","firstName","lastName","makeTooltip","map","makeHtmlElememt"],"mappings":"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","sourcesContent":["import {Markup} from \"./Markup\";\nimport * as React from \"react\";\n\n// export class NamesDB\n// {\n//   private namesDict: Set<WordInfo> = new Set();\n// }\n\nexport class WordInfo\n{\n  protected _word: string;\n  protected _count: number;\n  protected _dates: Set<Date> = new Set();\n\n  constructor(word: string, count: number, date?: Date)\n  {\n    this._word = word;\n    this._count = count;\n    if (date !== undefined)\n    {\n      this.addDate(date);\n    }\n  }\n\n  public get word(): string\n  {\n    return this._word;\n  }\n\n  public set word(value: string)\n  {\n    this._word = value;\n  }\n\n  public get count(): number\n  {\n    return this._count;\n  }\n\n  public set count(value: number)\n  {\n    this._count = value;\n  }\n\n  public get dates(): Set<Date>\n  {\n    return this._dates;\n  }\n\n  public addDate(date: Date): void\n  {\n    this._dates.add(date);\n  }\n\n  public clearDates(): void\n  {\n    this._dates.clear();\n  }\n\n  private getSortedDates(): Date[]\n  {\n    const sortedArray = Array.from(this._dates).sort((a: Date, b: Date) => {\n      return a.getTime() - b.getTime();\n    });\n    return sortedArray;\n  }\n\n  public getFirstDate(): Date\n  {\n    return this.getSortedDates()[0];\n  }\n\n  public getLastDate(): Date\n  {\n    const sortedDates: Date[] = this.getSortedDates();\n    return sortedDates[sortedDates.length - 1];\n  }\n\n  public makeHtmlElement(): JSX.Element | null\n  {\n    console.error(\"Not implemented\");\n    return null;\n  }\n}\n\n//word is firstName_lastName\nexport class NameInfo extends WordInfo\n{\n  constructor(markup: Markup, count: number, date?: Date)\n  {\n    super(markup.getKey(), count, date);\n    this._markup = markup;\n    this.displayNames = [markup.displayName];\n  }\n\n  public displayNames: string[];\n  private _markup: Markup;\n\n  public set word(value: string)\n  {\n    if (!Markup.isMarkup(value))\n    {\n      throw Error(\"Must be valid markup to be a NameInfo\");\n    }\n    this._word = Markup.create(value).getKey();\n  }\n\n  public get word(): string\n  {\n    return this.markup.displayName; //TODO:\n  }\n\n  public get markup(): Markup\n  {\n    return this._markup;\n  }\n\n  public addDisplayName(displayName: string): void\n  {\n    console.error(\"Not implemented\");\n  }\n\n  //display name doesn't matter - only first and last name pair is unique\n  public static equals(a: NameInfo, b: NameInfo): string\n  {\n    return a.markup.firstName === b.markup.firstName\n        && a.markup.lastName === b.markup.lastName;\n  }\n\n  //key is used as the map key to group unique first/last name pairs regardless\n  //of display names\n  public getKey(): string\n  {\n    return this.markup.getKey();\n  }\n\n  private makeTooltip(): JSX.Element\n  {\n    const markup: Markup = this.markup;\n\n    return <div>\n      <div>\n        {\"Display Names: \"}\n        {\n          this.displayNames.map((displayName: string) => {\n            return <span>{displayName},&nbsp;</span>;\n          })\n        }\n      </div>\n      <div>\n        Unique Days:\n      </div>\n      <div>\n        Average usages per day:\n      </div>\n      <div>\n\n      </div>\n    </div>;\n  }\n\n  public makeHtmlElememt(): JSX.Element | null\n  {\n    if (markup == null || markup.firstName == null || markup.lastName == null || markup.displayName == null)\n    {\n      return null;\n    }\n\n    //TODO: show multiple display names\n    return <span className=\"rendered-markup-display-name\">\n      {markup.firstName + \" \" + markup.lastName}\n      <span className=\"tooltip\">\n        {this.makeTooltip()}\n      </span>\n    </span>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}