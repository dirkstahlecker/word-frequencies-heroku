{"ast":null,"code":"import _initializerDefineProperty from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _temp,\n    _class3,\n    _jsxFileName = \"/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx\";\n\nimport * as React from \"react\"; // import {NameReference} from \"./NameReference\";\n\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { MarkupUtils } from \"./MarkupUtils\";\nexport let JournalReaderMachine = (_class = (_temp = class JournalReaderMachine {\n  constructor() {\n    _initializerDefineProperty(this, \"rawText\", _descriptor, this);\n  }\n\n  updateRawText(value) {\n    this.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n  }\n\n  renderJournal() {\n    const pieces = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])/);\n    console.log(pieces);\n    return null;\n  }\n\n  replaceMarkupWithDisplayName(rawText) {\n    while (true) {\n      let markup = MarkupUtils.getFullMarkupFromString(rawText);\n\n      if (markup == null) {\n        break;\n      }\n\n      const displayName = MarkupUtils.getDisplayNameFromMarkup(markup);\n\n      if (displayName == null) {\n        console.error(\"Invalid markup was received from getFullMarkupFromString\");\n        return \"TODO\";\n      }\n\n      rawText = rawText.replace(markup, displayName);\n    }\n\n    return rawText;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"rawText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"updateRawText\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateRawText\"), _class.prototype)), _class);\nexport let JournalReader = observer(_class3 = class JournalReader extends React.Component {\n  get machine() {\n    return this.props.machine;\n  } //<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.machine.updateRawText(e.currentTarget.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 4\n      }\n    }), this.machine.renderJournal());\n  }\n\n}) || _class3;","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/src/JournalReader.tsx"],"names":["React","observable","action","observer","MarkupUtils","JournalReaderMachine","updateRawText","value","rawText","renderJournal","pieces","split","console","log","replaceMarkupWithDisplayName","markup","getFullMarkupFromString","displayName","getDisplayNameFromMarkup","error","replace","JournalReader","Component","machine","props","render","e","currentTarget"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAAQC,UAAR,EAAoBC,MAApB,QAAiC,MAAjC;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAOA,WAAaC,oBAAb,sBAAO,MAAMA,oBAAN,CACP;AAAA;AAAA;AAAA;;AAIQC,EAAAA,aADP,CACqBC,KADrB,EAEA;AACC,SAAKC,OAAL,GAAeD,KAAf,CADD,CACuB;AACtB;;AAEME,EAAAA,aAAP,GACA;AACC,UAAMC,MAAgB,GAAG,KAAKF,OAAL,CAAaG,KAAb,CAAmB,+BAAnB,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,WAAO,IAAP;AACA;;AAEOI,EAAAA,4BAAR,CAAqCN,OAArC,EACA;AACC,WAAO,IAAP,EACA;AACC,UAAIO,MAAqB,GAAGX,WAAW,CAACY,uBAAZ,CAAoCR,OAApC,CAA5B;;AACA,UAAIO,MAAM,IAAI,IAAd,EACA;AACC;AACA;;AAED,YAAME,WAA0B,GAAGb,WAAW,CAACc,wBAAZ,CAAqCH,MAArC,CAAnC;;AACA,UAAIE,WAAW,IAAI,IAAnB,EACA;AACCL,QAAAA,OAAO,CAACO,KAAR,CAAc,0DAAd;AACA,eAAO,MAAP;AACA;;AACDX,MAAAA,OAAO,GAAGA,OAAO,CAACY,OAAR,CAAgBL,MAAhB,EAAwBE,WAAxB,CAAV;AACA;;AACD,WAAOT,OAAP;AACA;;AAnCF,CADA,iFAEEP,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WAEsC,EAFtC;AAAA;AAAA,kEAIEC,MAJF;AAwCA,WAAamB,aAAb,GADClB,QACD,WADA,MACakB,aADb,SACmCrB,KAAK,CAACsB,SADzC,CAEA;AACC,MAAYC,OAAZ,GACA;AACC,WAAO,KAAKC,KAAL,CAAWD,OAAlB;AACA,GAJF,CAMA;;;AACCE,EAAAA,MAAM,GACN;AACC,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACN;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGC,CAAD,IAAO,KAAKH,OAAL,CAAajB,aAAb,CAA2BoB,CAAC,CAACC,aAAF,CAAgBpB,KAA3C,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,eAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,eAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHM,EAKL,KAAKgB,OAAL,CAAad,aAAb,EALK,CAAP;AAOA;;AAhBF,CADA","sourcesContent":["import * as React from \"react\";\n// import {NameReference} from \"./NameReference\";\nimport {observable, action} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {MarkupUtils} from \"./MarkupUtils\";\n\nexport interface JournalReaderProps\n{\n\tmachine: JournalReaderMachine;\n}\n\nexport class JournalReaderMachine\n{\n\t@observable public rawText: string = \"\";\n\n\t@action\n\tpublic updateRawText(value: string): void\n\t{\n\t\tthis.rawText = value; // = this.replaceMarkupWithDisplayName(value);\n\t}\n\n\tpublic renderJournal(): JSX.Element | null\n\t{\n\t\tconst pieces: string[] = this.rawText.split(/(\\[!![^\\|]+\\|[^_]+_[^!]+!!\\])/);\n\t\tconsole.log(pieces);\n\t\treturn null;\n\t}\n\n\tprivate replaceMarkupWithDisplayName(rawText: string): string\n\t{\n\t\twhile (true)\n\t\t{\n\t\t\tlet markup: string | null = MarkupUtils.getFullMarkupFromString(rawText);\n\t\t\tif (markup == null)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst displayName: string | null = MarkupUtils.getDisplayNameFromMarkup(markup);\n\t\t\tif (displayName == null)\n\t\t\t{\n\t\t\t\tconsole.error(\"Invalid markup was received from getFullMarkupFromString\");\n\t\t\t\treturn \"TODO\";\n\t\t\t}\n\t\t\trawText = rawText.replace(markup, displayName);\n\t\t}\n\t\treturn rawText;\n\t}\n}\n\n@observer\nexport class JournalReader extends React.Component<JournalReaderProps>\n{\n\tprivate get machine(): JournalReaderMachine\n\t{\n\t\treturn this.props.machine;\n\t}\n\n//<textarea disabled={true} value={this.machine.rawText} style={{width: \"750px\", height: \"300px\"}}/>\n\trender()\n\t{\n\t\treturn <div>\n\t\t\t<input type=\"text\" onChange={(e) => this.machine.updateRawText(e.currentTarget.value)}/>\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t\n\t\t\t{this.machine.renderJournal()}\n\t\t</div>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}