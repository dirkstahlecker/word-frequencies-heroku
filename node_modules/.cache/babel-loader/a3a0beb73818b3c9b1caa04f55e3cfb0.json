{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n// eslint-disable-next-line\n\nvar Native = require('pg-native');\n\nvar TypeOverrides = require('../type-overrides');\n\nvar semver = require('semver');\n\nvar pkg = require('../../package.json');\n\nvar assert = require('assert');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar ConnectionParameters = require('../connection-parameters');\n\nvar msg = 'Version >= ' + pkg.minNativeVersion + ' of pg-native required.';\nassert(semver.gte(Native.version, pkg.minNativeVersion), msg);\n\nvar NativeQuery = require('./query');\n\nvar Client = module.exports = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this._Promise = config.Promise || global.Promise;\n  this._types = new TypeOverrides(config.types);\n  this.native = new Native({\n    types: this._types\n  });\n  this._queryQueue = [];\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._queryable = true; // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n\n  var cp = this.connectionParameters = new ConnectionParameters(config);\n  this.user = cp.user;\n  this.password = cp.password;\n  this.database = cp.database;\n  this.host = cp.host;\n  this.port = cp.port; // a hash to hold named queries\n\n  this.namedQueries = {};\n};\n\nClient.Query = NativeQuery;\nutil.inherits(Client, EventEmitter);\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.native = this.native;\n      query.handleError(err);\n    });\n  };\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery);\n    this._activeQuery = null;\n  }\n\n  this._queryQueue.forEach(enqueueError);\n\n  this._queryQueue.length = 0;\n}; // connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\n\n\nClient.prototype._connect = function (cb) {\n  var self = this;\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')));\n    return;\n  }\n\n  this._connecting = true;\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err);\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end();\n        return cb(err);\n      } // set internal states to connected\n\n\n      self._connected = true; // handle connection errors from the native layer\n\n      self.native.on('error', function (err) {\n        self._queryable = false;\n\n        self._errorAllQueries(err);\n\n        self.emit('error', err);\n      });\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        });\n      }); // signal we are connected now\n\n      self.emit('connect');\n\n      self._pulseQueryQueue(true);\n\n      cb();\n    });\n  });\n};\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n\n    return;\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}; // send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\n\n\nClient.prototype.query = function (config, values, callback) {\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config; // accept query(new Query(...), (err, res) => { }) style\n\n    if (typeof values === 'function') {\n      config.callback = values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new NativeQuery(config, values, callback);\n\n    if (!query.callback) {\n      let resolveOut, rejectOut;\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve;\n        rejectOut = reject;\n      });\n\n      query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res);\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error); // we already returned an error,\n      // just do nothing if query completes\n\n      query.callback = () => {}; // Remove from queue\n\n\n      var index = this._queryQueue.indexOf(query);\n\n      if (index > -1) {\n        this._queryQueue.splice(index, 1);\n      }\n\n      this._pulseQueryQueue();\n    }, readTimeout);\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n\n  if (!this._queryable) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'));\n    });\n    return result;\n  }\n\n  if (this._ending) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'));\n    });\n    return result;\n  }\n\n  this._queryQueue.push(query);\n\n  this._pulseQueryQueue();\n\n  return result;\n}; // disconnect from the backend server\n\n\nClient.prototype.end = function (cb) {\n  var self = this;\n  this._ending = true;\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb));\n  }\n\n  var result;\n\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = err => err ? reject(err) : resolve();\n    });\n  }\n\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'));\n\n    process.nextTick(() => {\n      self.emit('end');\n      if (cb) cb();\n    });\n  });\n  return result;\n};\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end';\n};\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return;\n  }\n\n  if (this._hasActiveQuery()) {\n    return;\n  }\n\n  var query = this._queryQueue.shift();\n\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain');\n    }\n\n    return;\n  }\n\n  this._activeQuery = query;\n  query.submit(this);\n  var self = this;\n  query.once('_done', function () {\n    self._pulseQueryQueue();\n  });\n}; // attempt to cancel an in-progress query\n\n\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {});\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n};","map":{"version":3,"sources":["/Users/dirkstahlecker/programming/word-frequencies-heroku/node_modules/pg/lib/native/client.js"],"names":["Native","require","TypeOverrides","semver","pkg","assert","EventEmitter","util","ConnectionParameters","msg","minNativeVersion","gte","version","NativeQuery","Client","module","exports","config","call","_Promise","Promise","global","_types","types","native","_queryQueue","_ending","_connecting","_connected","_queryable","cp","connectionParameters","user","password","database","host","port","namedQueries","Query","inherits","prototype","_errorAllQueries","err","enqueueError","query","process","nextTick","handleError","_hasActiveQuery","_activeQuery","forEach","length","_connect","cb","self","Error","getLibpqConnectionString","conString","connect","end","on","emit","channel","relname","payload","extra","_pulseQueryQueue","callback","resolve","reject","error","values","result","readTimeout","readTimeoutTimer","queryCallback","undefined","TypeError","submit","query_timeout","resolveOut","rejectOut","res","setTimeout","connection","index","indexOf","splice","clearTimeout","push","once","bind","state","initialConnection","shift","cancel","setTypeParser","oid","format","parseFn","getTypeParser"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\n// eslint-disable-next-line\nvar Native = require('pg-native')\nvar TypeOverrides = require('../type-overrides')\nvar semver = require('semver')\nvar pkg = require('../../package.json')\nvar assert = require('assert')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar msg = 'Version >= ' + pkg.minNativeVersion + ' of pg-native required.'\nassert(semver.gte(Native.version, pkg.minNativeVersion), msg)\n\nvar NativeQuery = require('./query')\n\nvar Client = module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = this.connectionParameters = new ConnectionParameters(config)\n  this.user = cp.user\n  this.password = cp.password\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n}\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      })\n      query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res)\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => err ? reject(err) : resolve()\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n"]},"metadata":{},"sourceType":"script"}