{"code":"import { observable, runInAction } from \"mobx\";\r\nimport React from \"react\";\r\nimport { isPlainObject } from \"./utils\";\r\nexport function useAsObservableSourceInternal(current, usedByLocalStore) {\r\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\";\r\n    if (usedByLocalStore && current === undefined) {\r\n        return undefined;\r\n    }\r\n    if (process.env.NODE_ENV !== \"production\" && !isPlainObject(current)) {\r\n        throw new Error(`${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`);\r\n    }\r\n    const [res] = React.useState(() => observable(current, {}, { deep: false }));\r\n    if (process.env.NODE_ENV !== \"production\" &&\r\n        Object.keys(res).length !== Object.keys(current).length) {\r\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`);\r\n    }\r\n    runInAction(() => {\r\n        Object.assign(res, current);\r\n    });\r\n    return res;\r\n}\r\nexport function useAsObservableSource(current) {\r\n    return useAsObservableSourceInternal(current, false);\r\n}\r\n","references":["D:/workspace/github/mobx-react-lite/node_modules/mobx/lib/mobx.d.ts","D:/workspace/github/mobx-react-lite/node_modules/@types/react/index.d.ts","D:/workspace/github/mobx-react-lite/src/utils.ts"],"dts":{"name":"D:/workspace/github/mobx-react-lite/src/useAsObservableSource.d.ts","writeByteOrderMark":false,"text":"export declare function useAsObservableSourceInternal<TSource>(current: TSource, usedByLocalStore: boolean): TSource;\r\nexport declare function useAsObservableSource<TSource>(current: TSource): TSource;\r\n"}}
