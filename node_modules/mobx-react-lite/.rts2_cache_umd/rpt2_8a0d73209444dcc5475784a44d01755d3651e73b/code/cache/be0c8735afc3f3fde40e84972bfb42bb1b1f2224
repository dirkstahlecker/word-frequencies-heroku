{"code":"export function createTrackingData(reaction) {\r\n    const trackingData = {\r\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\r\n        reaction\r\n    };\r\n    return trackingData;\r\n}\r\n/**\r\n * The minimum time before we'll clean up a Reaction created in a render\r\n * for a component that hasn't managed to run its effects. This needs to\r\n * be big enough to ensure that a component won't turn up and have its\r\n * effects run without being re-rendered.\r\n */\r\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\r\n/**\r\n * The frequency with which we'll check for leaked reactions.\r\n */\r\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10000;\r\n/**\r\n * Reactions created by components that have yet to be fully mounted.\r\n */\r\nconst uncommittedReactionRefs = new Set();\r\n/**\r\n * Latest 'uncommitted reactions' cleanup timer handle.\r\n */\r\nlet reactionCleanupHandle;\r\nfunction ensureCleanupTimerRunning() {\r\n    if (reactionCleanupHandle === undefined) {\r\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\r\n    }\r\n}\r\nexport function scheduleCleanupOfReactionIfLeaked(ref) {\r\n    uncommittedReactionRefs.add(ref);\r\n    ensureCleanupTimerRunning();\r\n}\r\nexport function recordReactionAsCommitted(reactionRef) {\r\n    uncommittedReactionRefs.delete(reactionRef);\r\n}\r\n/**\r\n * Run by the cleanup timer to dispose any outstanding reactions\r\n */\r\nfunction cleanUncommittedReactions() {\r\n    reactionCleanupHandle = undefined;\r\n    // Loop through all the candidate leaked reactions; those older\r\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\r\n    const now = Date.now();\r\n    for (const ref of uncommittedReactionRefs) {\r\n        const tracking = ref.current;\r\n        if (tracking) {\r\n            if (now >= tracking.cleanAt) {\r\n                // It's time to tidy up this leaked reaction.\r\n                tracking.reaction.dispose();\r\n                ref.current = null;\r\n                uncommittedReactionRefs.delete(ref);\r\n            }\r\n        }\r\n    }\r\n    if (uncommittedReactionRefs.size > 0) {\r\n        // We've just finished a round of cleanups but there are still\r\n        // some leak candidates outstanding.\r\n        ensureCleanupTimerRunning();\r\n    }\r\n}\r\n/* istanbul ignore next */\r\n/**\r\n * Only to be used by test functions; do not export outside of mobx-react-lite\r\n */\r\nexport function forceCleanupTimerToRunNowForTests() {\r\n    // This allows us to control the execution of the cleanup timer\r\n    // to force it to run at awkward times in unit tests.\r\n    if (reactionCleanupHandle) {\r\n        clearTimeout(reactionCleanupHandle);\r\n        cleanUncommittedReactions();\r\n    }\r\n}\r\n/* istanbul ignore next */\r\nexport function resetCleanupScheduleForTests() {\r\n    if (reactionCleanupHandle) {\r\n        clearTimeout(reactionCleanupHandle);\r\n        reactionCleanupHandle = undefined;\r\n    }\r\n    uncommittedReactionRefs.clear();\r\n}\r\n","references":["D:/workspace/github/mobx-react-lite/node_modules/mobx/lib/mobx.d.ts"],"dts":{"name":"D:/workspace/github/mobx-react-lite/src/reactionCleanupTracking.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nimport { Reaction } from \"mobx\";\r\nexport interface IReactionTracking {\r\n    /** The Reaction created during first render, which may be leaked */\r\n    reaction: Reaction;\r\n    /**\r\n     * The time (in ticks) at which point we should dispose of the reaction\r\n     * if this component hasn't yet been fully mounted.\r\n     */\r\n    cleanAt: number;\r\n    /**\r\n     * Whether the component has yet completed mounting (for us, whether\r\n     * its useEffect has run)\r\n     */\r\n    mounted?: boolean;\r\n    /**\r\n     * Whether the observables that the component is tracking changed between\r\n     * the first render and the first useEffect.\r\n     */\r\n    changedBeforeMount?: boolean;\r\n}\r\nexport declare function createTrackingData(reaction: Reaction): IReactionTracking;\r\n/**\r\n * The minimum time before we'll clean up a Reaction created in a render\r\n * for a component that hasn't managed to run its effects. This needs to\r\n * be big enough to ensure that a component won't turn up and have its\r\n * effects run without being re-rendered.\r\n */\r\nexport declare const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\r\n/**\r\n * The frequency with which we'll check for leaked reactions.\r\n */\r\nexport declare const CLEANUP_TIMER_LOOP_MILLIS = 10000;\r\nexport declare function scheduleCleanupOfReactionIfLeaked(ref: React.MutableRefObject<IReactionTracking | null>): void;\r\nexport declare function recordReactionAsCommitted(reactionRef: React.MutableRefObject<IReactionTracking | null>): void;\r\n/**\r\n * Only to be used by test functions; do not export outside of mobx-react-lite\r\n */\r\nexport declare function forceCleanupTimerToRunNowForTests(): void;\r\nexport declare function resetCleanupScheduleForTests(): void;\r\n"}}
