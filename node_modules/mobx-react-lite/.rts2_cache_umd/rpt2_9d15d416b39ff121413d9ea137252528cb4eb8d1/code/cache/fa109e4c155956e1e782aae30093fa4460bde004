{"code":"import { forwardRef, memo } from \"react\";\r\nimport { isUsingStaticRendering } from \"./staticRendering\";\r\nimport { useObserver } from \"./useObserver\";\r\n// n.b. base case is not used for actual typings or exported in the typing files\r\nexport function observer(baseComponent, options) {\r\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\r\n    if (isUsingStaticRendering()) {\r\n        return baseComponent;\r\n    }\r\n    const realOptions = {\r\n        forwardRef: false,\r\n        ...options\r\n    };\r\n    const baseComponentName = baseComponent.displayName || baseComponent.name;\r\n    const wrappedComponent = (props, ref) => {\r\n        return useObserver(() => baseComponent(props, ref), baseComponentName);\r\n    };\r\n    wrappedComponent.displayName = baseComponentName;\r\n    // memo; we are not intested in deep updates\r\n    // in props; we assume that if deep objects are changed,\r\n    // this is in observables, which would have been tracked anyway\r\n    let memoComponent;\r\n    if (realOptions.forwardRef) {\r\n        // we have to use forwardRef here because:\r\n        // 1. it cannot go before memo, only after it\r\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\r\n        //    since it wouldn't be a callable function anymore\r\n        memoComponent = memo(forwardRef(wrappedComponent));\r\n    }\r\n    else {\r\n        memoComponent = memo(wrappedComponent);\r\n    }\r\n    copyStaticProperties(baseComponent, memoComponent);\r\n    memoComponent.displayName = baseComponentName;\r\n    return memoComponent;\r\n}\r\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\r\nconst hoistBlackList = {\r\n    $$typeof: true,\r\n    render: true,\r\n    compare: true,\r\n    type: true\r\n};\r\nfunction copyStaticProperties(base, target) {\r\n    Object.keys(base).forEach(key => {\r\n        if (base.hasOwnProperty(key) && !hoistBlackList[key]) {\r\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\r\n        }\r\n    });\r\n}\r\n","references":["D:/workspace/github/mobx-react-lite/node_modules/@types/react/index.d.ts","D:/workspace/github/mobx-react-lite/src/staticRendering.ts","D:/workspace/github/mobx-react-lite/src/useObserver.ts"],"dts":{"name":"D:/workspace/github/mobx-react-lite/src/observer.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport interface IObserverOptions {\r\n    readonly forwardRef?: boolean;\r\n}\r\nexport declare function observer<P extends object, TRef = {}>(baseComponent: React.RefForwardingComponent<TRef, P>, options: IObserverOptions & {\r\n    forwardRef: true;\r\n}): React.MemoExoticComponent<React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>>;\r\nexport declare function observer<P extends object>(baseComponent: React.FunctionComponent<P>, options?: IObserverOptions): React.FunctionComponent<P>;\r\n"}}
