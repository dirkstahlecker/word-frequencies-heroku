{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { parse, register } from \"ts-node/dist\";\nimport { argv } from \"yargs\";\n\nconst TS_NODE_OPTIONS = [\n  \"fast\",\n  \"lazy\",\n  \"cache\",\n  \"cacheDirectory\",\n  \"compiler\",\n  \"project\",\n  \"ignore\",\n  \"ignoreWarnings\",\n  \"disableWarnings\",\n  \"getFile\",\n  \"fileExists\",\n  \"compilerOptions\",\n];\n\nconst tsNodeOptions = Object.assign({}, ...TS_NODE_OPTIONS.map((option) => {\n  if (argv[option]) {\n    return (option === \"compilerOptions\")\n      ? {compilerOptions: parse(argv[option])}\n      : {[option]: argv[option]};\n  }\n}));\n\nregister(tsNodeOptions);\n\nconst Jasmine = require(\"jasmine\");\nconst Command = require(\"jasmine/lib/command\");\n\nconst jasmine = new Jasmine({ projectBaseDir: path.resolve() });\nconst examplesDir = path.join(\"node_modules\", \"jasmine-core\", \"lib\", \"jasmine-core\", \"example\", \"node_example\");\nconst command = new Command(path.resolve(), examplesDir, console.log);\nconst configPath = argv.config || process.env.JASMINE_CONFIG_PATH || \"spec/support/jasmine.json\";\n\nconst initReporters = (config: any) => {\n  if (config.reporters && config.reporters.length > 0) {\n    jasmine.env.clearReporters();\n    config.reporters.forEach((reporter: {name: string, options: any}) => {\n      const parts = reporter.name.split(\"#\");\n      const name = parts[0];\n      const member = parts[1];\n      const reporterClass = member ? require(name)[member] : require(name);\n      jasmine.addReporter(new (reporterClass)(reporter.options));\n    });\n  }\n};\n\nlet configJSON: string = \"\";\ntry {\n  configJSON = fs.readFileSync(path.resolve(configPath), \"utf8\");\n} catch (e) { }\n\nif (configJSON) {\n  const config = JSON.parse(configJSON);\n  initReporters(config);\n}\n\nconst commandOptions = process.argv.slice(2).filter((option) => option.indexOf(configPath) >= 0);\n\ncommand.run(jasmine, commandOptions);\n"]}